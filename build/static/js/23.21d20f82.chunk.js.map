{"version":3,"sources":["Shared/HelperBtn/JoinBtn.tsx","Container/NotLoggedIn/SignInAlert.tsx","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js","../node_modules/react-bootstrap/esm/ModalBody.js","Views/Groups/Details/MessageModal.tsx","Views/Groups/Details/Components/Header.js","Views/Groups/Details/index.tsx"],"names":["JoinBtn","communityId","isJoined","isPending","name","React","hasJoined","setJoined","dispatchEvent","data","document","CustomEvent","COMMUNITY_JOIN_TOGGLE_EVENT","detail","community","type","disabled","className","onClick","CommunitiesList","leaveCommunity","then","ReactGA","event","category","action","label","nonInteraction","joinCommunity","response","isJoinPending","SignInAlert","rHyphen","pascalCase","str","toUpperCase","string","replace","_","chr","slice","createWithBsPrefix","prefix","_temp","_ref","_ref$displayName","displayName","_ref$Component","Component","defaultProps","BsComponent","forwardRef","_ref2","ref","bsPrefix","_ref2$as","as","Tag","props","_objectWithoutPropertiesLoose","resolvedPrefix","useBootstrapPrefix","createElement","_extends","classNames","MessageModal","isOpen","toggle","onMessageChange","send","message","Modal","isOpened","ModalBody","src","assetUrl","logo","alt","icon","faTimes","placeholder","value","onChange","CommunityHeader","renderJoinBtn","renderSortBy","description","totalMembers","PostedImage","GroupPosts","lazy","RightContent","state","useState","sliced","setsliced","rules","map","item","idx","key","length","moderators","to","_id","userName","GroupDetails","useLocation","toggleModal","setCommunity","setMessage","id","useParams","sorting","setsorting","page","setpage","onModalToggle","prev","useEffect","fetchById","pageview","Fragment","asideRightContent","SortBy","hideLable","onValueChange","e","onSortChange","isLoggedIn","isComMod","pathname","faEdit","create_from","fallback","Loader","pageNo","chat","sendMessageToMods","target"],"mappings":"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","file":"static/js/23.21d20f82.chunk.js","sourcesContent":["import * as React from \"react\"\nimport CommunitiesList from \"../../Helpers/Request/Services/Communities/Communities\"\nimport { COMMUNITY_JOIN_TOGGLE_EVENT } from \"../../Constants/constants\"\nimport ReactGA from \"react-ga\"\nexport interface JoinBtnProps {\n    communityId: string\n    isJoined: boolean\n    isPending: boolean\n    name: string\n}\n\nexport type JoinStatus = {\n    isJoined: boolean\n    isPending: boolean\n}\n\nconst JoinBtn: React.FC<JoinBtnProps> = ({ communityId, isJoined, isPending, name }) => {\n    const [hasJoined, setJoined] = React.useState({\n        isJoined,\n        isPending,\n    })\n\n    const dispatchEvent = (data: JoinStatus) => {\n        document.dispatchEvent(\n            new CustomEvent(COMMUNITY_JOIN_TOGGLE_EVENT, {\n                detail: {\n                    ...data,\n                    community: communityId,\n                },\n            })\n        )\n    }\n\n    const toggleCommunity = () => {\n        if (hasJoined.isJoined) {\n            CommunitiesList.leaveCommunity(communityId).then(() => {\n                const data = {\n                    isJoined: false,\n                    isPending: false,\n                }\n                dispatchEvent(data)\n                setJoined(data)\n                ReactGA.event({\n                    category: \"user\",\n                    action: \"leaved\",\n                    label: name,\n                    nonInteraction: false,\n                })\n            })\n        } else if (!hasJoined.isPending) {\n            CommunitiesList.joinCommunity(communityId).then(response => {\n                const data = {\n                    isJoined: response.data.isJoined,\n                    isPending: response.data.isJoinPending,\n                }\n                dispatchEvent(data)\n                ReactGA.event({\n                    category: \"user\",\n                    action: \"joined\",\n                    label: name,\n                    nonInteraction: false,\n                })\n                setJoined(data)\n            })\n        }\n    }\n\n    React.useEffect(() => {\n        setJoined(data => ({ ...data, isPending }))\n    }, [isPending])\n\n    React.useEffect(() => {\n        setJoined(data => ({ ...data, isJoined }))\n    }, [isJoined])\n\n    return (\n        <button type=\"button\" disabled={hasJoined.isPending} className=\"btn btn-join\" onClick={toggleCommunity}>\n            {hasJoined.isJoined ? \"Leave Community\" : hasJoined.isPending ? \"Pending\" : \"Join Community\"}\n        </button>\n    )\n}\n\nexport default JoinBtn\n","import React, { ReactElement } from 'react'\n\nconst SignInAlert = (): ReactElement => {\n    return (\n        <div className=\"alert alert-warning text-center mt-2\">\n            Sign in to join\n        </div>\n    )\n}\n\nexport default SignInAlert\n","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\n\nvar pascalCase = function pascalCase(str) {\n  return str[0].toUpperCase() + camelize(str).slice(1);\n};\n\nexport default function createWithBsPrefix(prefix, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$displayName = _ref.displayName,\n      displayName = _ref$displayName === void 0 ? pascalCase(prefix) : _ref$displayName,\n      _ref$Component = _ref.Component,\n      Component = _ref$Component === void 0 ? 'div' : _ref$Component,\n      defaultProps = _ref.defaultProps;\n\n  var BsComponent = React.forwardRef( // eslint-disable-next-line react/prop-types\n  function (_ref2, ref) {\n    var className = _ref2.className,\n        bsPrefix = _ref2.bsPrefix,\n        _ref2$as = _ref2.as,\n        Tag = _ref2$as === void 0 ? Component : _ref2$as,\n        props = _objectWithoutPropertiesLoose(_ref2, [\"className\", \"bsPrefix\", \"as\"]);\n\n    var resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/React.createElement(Tag, _extends({\n      ref: ref,\n      className: classNames(className, resolvedPrefix)\n    }, props));\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('modal-body');","import * as React from \"react\"\nimport { ModalBody } from \"react-bootstrap\"\nimport Modal from \"../../../Shared/Modal\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\"\nimport { Avatar } from \"../../../Shared/Images/Images\"\nimport assetUrl from \"../../../Helpers/Functions/assetUrl\";\nexport interface MessageModalProps {\n    isOpen: boolean;\n    toggle: () => void;\n    send: () => void;\n    onMessageChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    message: string;\n    community: any;\n}\n\nconst MessageModal: React.SFC<MessageModalProps> = ({community, isOpen = false, toggle, onMessageChange, send, message }) => {\n    return (\n        <Modal isOpened={isOpen}>\n            <ModalBody>\n                <div className=\"d-flex justify-content-between mb-2\">\n                    <div className=\"d-flex align-items-center message--header\">\n                        {/* <img className=\"user--img\" src={community?.logo || Avatar} alt=\"\" /> */}\n                        <img className=\"user--img\" src={assetUrl(community?.logo)} alt=\"\" />\n                        <h6 className=\"user--name\">{community?.name}</h6>\n                    </div>\n                    <div className=\"close__icon\" onClick={toggle}>\n                        <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n                <textarea\n                    placeholder={\"Type your message here\"}\n                    className=\"new--message form-control\"\n                    value={message}\n                    onChange={onMessageChange}\n                />\n\n                <div className=\"text-right mt-2\">\n                    <button className=\"btn btn-login\" onClick={send}>\n                        Send\n                    </button>\n                </div>\n            </ModalBody>\n        </Modal>\n    )\n}\n\nexport default MessageModal\n","import React from \"react\"\nimport assetUrl from \"../../../../Helpers/Functions/assetUrl\"\nimport { PostedImage } from \"../../../../Shared/Images/Images\"\n\nconst CommunityHeader = ({ community, renderJoinBtn, renderSortBy }) => {\n    const { logo, name, description, totalMembers = 0 } = community\n    return (\n        <div className=\"commuity__top_container\">\n            <div className=\"community_header_leftImage\">\n                <img src={logo ? assetUrl(logo) : PostedImage} alt={name} />\n            </div>\n            <div className=\"community_header_rightMeta\">\n                <h2>{name}</h2>\n                <p className=\"community__members\">{totalMembers} Members</p>\n                <p>{description}</p>\n                <div className=\"community__join_BtnandSort_container\">\n                    <div>{renderJoinBtn()}</div>\n                    <div>{renderSortBy()}</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CommunityHeader\n","import React, { lazy, Suspense, useEffect, useState, ChangeEvent } from \"react\"\nimport ReactGA from \"react-ga\"\nimport { Link, useLocation, useParams } from \"react-router-dom\"\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nimport SignInAlert from \"../../../Container/NotLoggedIn/SignInAlert\"\nimport GroupTopBar from \"../../../Container/Top/groupTop\"\nimport SortBy from \"../../../Container/Top/SortBy\"\nimport MainContent from \"../../../Controller/Main/Content\"\nimport Loader from \"../../../Shared/Loader\"\nimport { TrendingCommunities } from \"../../../Interface/SideBar/TrendingCommunitiesInterface\"\nimport { isLoggedIn } from \"../../../Hooks/Auth/getAuth\"\nimport JoinBtn from \"../../../Shared/HelperBtn/JoinBtn\"\nimport CommunitiesList from \"../../../Helpers/Request/Services/Communities/Communities\"\nimport { role } from \"../../../Constants/getUserId\"\nimport { InfoIcon } from \"../../../Shared/Icons\"\nimport MessageModal from \"./MessageModal\"\nimport { chat } from \"../../../Helpers/Request/Services/chat/chat\"\nimport CommunityHeader from \"./Components/Header\"\nimport { SSL_OP_NETSCAPE_CHALLENGE_BUG } from \"constants\"\n\nconst GroupPosts = lazy(() => import(\"./Components/Posts\"))\nconst GAEvent = (category: string, action: string, label: string) => {\n    ReactGA.event({\n        category: category,\n        action: action,\n        label: label,\n        nonInteraction: false,\n    })\n}\n\nconst GroupDetails = () => {\n    const { state }: TrendingCommunities | any = useLocation()\n    const [isOpen, toggleModal] = useState(false)\n    const [community, setCommunity] = useState(state)\n    const [message, setMessage] = useState(\"\")\n    const { id } = useParams()\n    const [sorting, setsorting] = useState(\"newest\")\n    const [page, setpage] = useState(1)\n\n    const onModalToggle = () => toggleModal(prev => !prev)\n    const [sliced, setsliced] = useState(2)\n    useEffect(() => {\n        CommunitiesList.fetchById(id).then(response => {\n            ReactGA.pageview(response.data.data.name || \"community detail\")\n            setCommunity(response.data.data)\n        })\n        //eslint-disable-next-line\n    }, [id])\n\n    const onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setMessage(e.target.value)\n    }\n\n    const onMessageSend = () => {\n        chat.sendMessageToMods(id, { message }).then(() => {\n            onModalToggle()\n            setMessage(\"\")\n        })\n    }\n\n    const onSortChange = (e: any) => {\n        setsorting(e)\n        setpage(1)\n    }\n\n    return (\n        <React.Fragment>\n            {community ? (\n                <MainContent asideRightContent={<RightContent state={community} />}>\n                    <React.Fragment>\n                        <div className=\"mc-border mt-5 mt-lg-0 mb-3\">\n                            <div className=\"group-wrap\">\n                                <div className=\"grp-header d-flex justify-content-between\">\n                                    {/* <GroupTopBar state={community} /> */}\n                                    <CommunityHeader\n                                        community={community}\n                                        renderJoinBtn={() => {\n                                            return (\n                                                <JoinBtn\n                                                    communityId={community._id}\n                                                    isJoined={community.isJoined}\n                                                    isPending={community.isJoinPending}\n                                                    name={community.name}\n                                                />\n                                            )\n                                        }}\n                                        renderSortBy={() => {\n                                            return (\n                                                <SortBy\n                                                    value=\"newest\"\n                                                    hideLable={true}\n                                                    onValueChange={(e: any) => onSortChange(e)}\n                                                />\n                                            )\n                                        }}\n                                    />\n                                    {isLoggedIn ? (\n                                        <div\n                                            className=\"form-group mb-0\"\n                                            onClick={() => GAEvent(\"user\", \"resource clicked\", community.name)}\n                                        >\n                                            {/* {role === \"User\" ? (\n                                                <div\n                                                    className=\"mr-2 cursor d-flex align-items-center\"\n                                                    onClick={onModalToggle}\n                                                >\n                                                    {community.isModerator ? (\n                                                        <Link\n                                                            to={{\n                                                                pathname: `/inbox/${id}`,\n                                                                state: {\n                                                                    isModerator: community.isModerator,\n                                                                    _id: id,\n                                                                },\n                                                            }}\n                                                            type={\"button\"}\n                                                            className={\"btn btn-join\"}\n                                                        >\n                                                            Inbox\n                                                        </Link>\n                                                    ) : (\n                                                        <>\n                                                            <InfoIcon />{\" \"}\n                                                            <span className=\"font-weight-bold\">Message Mods</span>\n                                                        </>\n                                                    )}\n                                                </div>\n                                            ) : null} */}\n                                            {community.isComMod && (\n                                                <Link\n                                                    to={{\n                                                        pathname: \"/community/edit\",\n                                                        state: community,\n                                                    }}\n                                                    className=\"mr-2\"\n                                                >\n                                                    <span className=\"icon\">\n                                                        <FontAwesomeIcon icon={faEdit} />\n                                                    </span>\n                                                    <span className=\"text\">Edit</span>\n                                                </Link>\n                                            )}\n                                            {/* <JoinBtn\n                                                communityId={community._id}\n                                                isJoined={community.isJoined}\n                                                isPending={community.isJoinPending}\n                                                name={community.name}\n                                            /> */}\n                                        </div>\n                                    ) : (\n                                        <div className=\"form-group mb-0\">\n                                            <SignInAlert />\n                                        </div>\n                                    )}\n                                </div>\n                                {/* <p\n                                    className=\"general-text community__description pt-2 mb-0\"\n                                    dangerouslySetInnerHTML={{ __html: community.description }}\n                                /> */}\n                            </div>\n                        </div>\n\n                        <div className=\"mc-border mb-3 py-2 px-3\">\n                            <Link\n                                to={{\n                                    pathname: \"/post/create\",\n                                    state: { community: id, create_from: \"community_detail\" },\n                                }}\n                            >\n                                <div className=\"pc-link\">Create Post</div>\n                            </Link>\n                        </div>\n                        {/* <SortBy /> */}\n                    </React.Fragment>\n\n                    <Suspense fallback={<Loader />}>\n                        <GroupPosts pageNo={page} sorting={sorting} />\n                    </Suspense>\n                </MainContent>\n            ) : (\n                <Loader />\n            )}\n            <MessageModal\n                isOpen={isOpen}\n                toggle={onModalToggle}\n                message={message}\n                send={onMessageSend}\n                onMessageChange={onMessageChange}\n                community={community}\n            />\n        </React.Fragment>\n    )\n}\n\nconst RightContent = ({ state }: any) => {\n    const [sliced, setsliced] = useState(2)\n    return (\n        <>\n            <div className=\"mc-border\">\n                <div className=\"moderators\">\n                    <div className=\"group-rules-list\">\n                        <h6 className=\"heading-6 ad__title bb-1 pb-3\">RULES</h6>\n                        <ul className=\"list-unstyled\">\n                            {state.rules?.slice(0, sliced).map((item: string[], idx: number) => (\n                                <li key={idx}>\n                                    <span>\n                                        {idx + 1}. {item}\n                                    </span>\n                                </li>\n                            ))}\n                        </ul>\n                        <div className=\"form-group mb-2\">\n                            <button className=\"btn btn-view\" onClick={() => setsliced(state.rules.length)}>\n                                VIEW ALL\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"mc-border mt-5\">\n                <div className=\"moderators\">\n                    <div className=\"moderators-list\">\n                        <h6 className=\"heading-6 bb-1 pb-3\">Moderators</h6>\n                        <ul className=\"list-unstyled\">\n                            {(state.moderators || []).map((item: { _id: string; userName: string }, idx: number) => (\n                                <li key={idx}>\n                                    <Link to={`/public/profile/${item._id}`}>\n                                        <span>{item.userName}</span>\n                                    </Link>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default GroupDetails\n"],"sourceRoot":""}