{"version":3,"sources":["Views/Post/Details/Components/CommentBox.tsx","Container/NotLoggedIn/SignInAlert.tsx","Views/Post/Details/Components/CommentHeader.tsx","Views/Post/Details/Components/CommentItem.tsx","Views/Post/Details/Components/PostComments.tsx","Views/Post/Details/index.tsx"],"names":["CommentBox","onChange","postId","data","submitUrl","isCommentAllowed","afterComment","useState","values","setValues","useEffect","className","validate","body","buttonText","formId","afterSubmit","console","log","submitBtnWrapperClass","props","submitButtonClass","inputWrapperClass","name","rows","placeholder","value","SignInAlert","CommentHeader","comment","to","userId","_id","src","assetUrl","userImage","RemovedImage","alt","userName","relativeDate","createdAt","CommentItem","totalReplies","deleteReply","isMod","postID","useParams","id","React","repliesCount","setRepliesCount","showReplies","toggleShowReplies","page","setPage","isLiked","isVoted","toggleVote","upVoteCount","totalLiked","setTotalLikes","children","replies","setReplies","commentId","reply","setReply","isReplying","toggleReply","onDelete","PostCommentsService","delete","then","rep","filter","getCommentReplies","response","onClick","helpful","width","height","viewBox","d","fill","fillOpacity","xmlns","stroke","strokeWidth","ReportBtn","type","icon","faTrash","Row","Col","event","target","style","addComment","map","key","length","prevPage","PostComments","comments","fetchComments","hasMoreComments","allComments","setAllComments","Fragment","item","enter","down","delay","comRef","createRef","PostDetails","state","useLocation","totalVotes","setComments","undefined","details","setDetails","isLoggedIn","auth","e","getTopLevelComments","docs","downVoteCount","totalDocs","document","addEventListener","removeEventListener","Post","detailsById","scroll","scrollTo","window","scrollY","asideRightContent","knowledgeGroup","logo","PostedImage","members","description","communityId","CommunitiesList","joinCommunity","totalComments","post","idx","isUser","topMargin","hideAward","isJoined","ref","isComMod"],"mappings":"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","file":"static/js/16.adb54cae.chunk.js","sourcesContent":["import React, { FC, useEffect, useState } from \"react\"\n\nimport Form from \"../../../../Components/Form/Form\"\nimport FormInput from \"../../../../Components/Form/FormInput\"\n\ntype CommentBox = {\n    onChange: Function\n    // data: Record<string, string | number>\n    data: string\n    postId: any\n    submitUrl: string\n    isCommentAllowed: boolean\n    afterComment?: (data?: any) => void\n}\n\nconst CommentBox: FC<CommentBox> = ({ onChange, postId, data, submitUrl, isCommentAllowed = true, afterComment }) => {\n    const [values, setValues] = useState(data)\n\n    useEffect(() => {\n        setValues(data);\n    }, [data])\n\n\n    const commentSuccess = (data: any) => {\n        console.log('comment success', data);\n        if(afterComment) \n        afterComment(data.body);\n    }\n\n\n    return isCommentAllowed ? (\n        <div className=\"mc-border p-2 mt-4\">\n            <div className=\"cp-form p-0\">\n                <div className=\"form-group mb-0\">\n                    <Form\n                        validate\n                        className=\"d-flex align-items-center comment__form\"\n                        submitUrl={submitUrl}\n                        data={{body: data, postId: postId}}\n                        buttonText=\"Comment\"\n                        formId={\"comment\"}\n                        afterSubmit={commentSuccess}\n                        submitBtnWrapperClass=\"\"\n                        props={{\n                            submitButtonClass: \"btn btn-signup comment__btn\",\n                        }}\n                    >\n                        <FormInput\n                            className=\"form-control form-input2\"\n                            inputWrapperClass=\"form-group comment__input\"\n                            onChange={onChange}\n                            name=\"body\"\n                            props={{\n                                rows: \"2\",\n                                placeholder: \"Write your comment..\",\n                                value: values,\n                            }}\n                        />\n                    </Form>\n                </div>\n            </div>\n        </div>\n    ) : null\n}\n\nexport default CommentBox\n","import React, { ReactElement } from 'react'\n\nconst SignInAlert = (): ReactElement => {\n    return (\n        <div className=\"alert alert-warning text-center mt-2\">\n            Sign in to join\n        </div>\n    )\n}\n\nexport default SignInAlert\n","import * as React from \"react\"\nimport { Link } from \"react-router-dom\"\nimport assetUrl from \"../../../../Helpers/Functions/assetUrl\"\nimport relativeDate from \"../../../../Helpers/Date/relativeDate\"\nimport { CommentReplies } from \"../../../../Interface/Comments/CommentsInterface\"\nimport isBaseImg from \"../../../../Helpers/Functions/isBaseImg\"\nimport { RemovedImage } from \"../../../../Shared/Images/Images\"\n\nexport interface CommentHeaderProps {\n    comment: CommentReplies\n}\n\nconst CommentHeader: React.SFC<CommentHeaderProps> = ({ comment }) => {\n    return (\n        <div className=\"post-header d-flex justify-content-between\">\n            <div className=\"post-head-detail d-flex\">\n                <Link to={`${comment.userId ? `/profile/${comment?.userId?._id}` : null}`}>\n                    <div className=\"post-detail pl-0 d-flex\">\n                        <div className=\"profile-image\">\n                            <img\n                                src={\n                                    // isBaseImg(comment.userId?.userImage)\n                                    //     ? comment.userId?.userImage\n                                    //     :\n                                    comment.userId ? assetUrl(comment.userId?.userImage) : RemovedImage\n                                }\n                                alt={comment.userId?.userName || \"User Removed\"}\n                            />\n                        </div>\n                        <div className=\"post-in\">Reply by :</div>\n                        <div className=\"post-in  ml-1\">\n                            {\" \"}\n                            {comment.userId ? comment.userId?.userName : \"User Removed\"}\n                        </div>\n                    </div>\n                </Link>\n            </div>\n            <div className=\"post-time \">\n                <div className=\"post-in\">{relativeDate(comment.createdAt)}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default CommentHeader\n","import * as React from \"react\"\nimport { AxiosResponse } from \"axios\"\nimport { Row, Col } from \"react-bootstrap\"\nimport { useParams } from \"react-router-dom\"\n\nimport ReportBtn from \"../../../../Shared/HelperBtn/ReportBtn\"\nimport CommentHeader from \"./CommentHeader\"\n\nimport { CommentReplies } from \"../../../../Interface/Comments/CommentsInterface\"\nimport { PostCommentsService } from \"../../../../Helpers/Request/Services/Comments/PostComments\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\"\nimport { userId } from \"../../../../Constants/getUserId\"\n\nexport interface CommentItemProps {\n    isMod: boolean\n    comment: CommentReplies\n    totalReplies: number\n    isCommentAllowed: boolean\n    deleteReply: (id: string) => void\n    postID?: string\n}\n\nconst CommentItem: React.FC<CommentItemProps> = ({\n    comment,\n    totalReplies = 0,\n    isCommentAllowed = true,\n    deleteReply,\n    isMod,\n    postID,\n}) => {\n    const { id: pId } = useParams()\n    const [repliesCount, setRepliesCount] = React.useState(totalReplies)\n    const [showReplies, toggleShowReplies] = React.useState(true)\n    const [page, setPage] = React.useState(1)\n    const [isVoted, toggleVote] = React.useState(!!comment.isLiked)\n    const [totalLiked, setTotalLikes] = React.useState(comment.upVoteCount)\n    const [replies, setReplies] = React.useState<CommentReplies[]>(comment.children || [])\n    const [reply, setReply] = React.useState({\n        body: \"\",\n        commentId: comment._id,\n        postId: postID,\n    })\n    const [isReplying, toggleReply] = React.useState(false)\n\n    const postCommentReply = () => {\n        // if (reply.commentId) delete reply.postId\n\n        PostCommentsService.addComment(reply).then(response => {\n            setReplies([...replies, response.data.body])\n            setRepliesCount(repliesCount + 1)\n            toggleReply(false)\n        })\n    }\n\n    const onDelete = (id: string) => {\n        PostCommentsService.delete(id, isMod).then(() => {\n            const rep = replies.filter(reply => reply._id !== id)\n            setReplies(rep)\n            setRepliesCount(repliesCount - 1)\n        })\n    }\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setReply({ ...reply, [event.target.name]: event.target.value })\n    }\n\n    const getReplies = () => {\n        setPage(prevPage => prevPage + 1)\n    }\n\n    const getCommentReplies = () => toggleShowReplies(!showReplies)\n\n    React.useEffect(() => {\n        PostCommentsService.getCommentReplies(comment._id, {}, page).then((response: AxiosResponse) => {\n            setReplies([...replies, ...(response.data.data || [])])\n            toggleShowReplies(true)\n        })\n        // eslint-disable-next-line\n    }, [page])\n\n    const toggleReplyButton = () => toggleReply(!isReplying)\n\n    const onVote = () => {\n        PostCommentsService.helpful(comment._id, isVoted).then(() => {\n            setTotalLikes(isVoted ? totalLiked - 1 : totalLiked + 1)\n            toggleVote(!isVoted)\n        })\n    }\n\n    return (\n        <div className=\"post-container comment__item\">\n            <div className=\"main-data pt-4\">\n                <div className=\"post-wrap\">\n                    <div className=\"post-body\">\n                        <div className=\"ps-left\">\n                            <div className=\"left-wrapper\">\n                                <CommentHeader comment={comment} />\n                                <p className=\"general-text\">{comment.body}</p>\n                                <div className=\"post-footer\">\n                                    <div className=\"lefts\">\n                                        <div className=\"post-reply pointer\" onClick={onVote}>\n                                            <span>{totalLiked}</span>\n                                            <svg width={20} height={20} viewBox=\"0 0 40 58\" className=\"\">\n                                                <path\n                                                    d=\"M23.75 0C23.75 0 25.6 7.20581 25.6 13.052C25.6 18.6535 22.225 23.1946 17.075 23.1946C11.9 23.1946 8 18.6535 8 13.052L8.075 12.0731C3.025 18.5992 0 27.0558 0 36.2466C0 48.2654 8.95 58 20 58C31.05 58 40 48.2654 40 36.2466C40 21.5902 33.525 8.51102 23.75 0ZM19.275 49.8425C14.825 49.8425 11.225 46.0356 11.225 41.3043C11.225 36.8992 13.85 33.7993 18.25 32.8204C22.675 31.8415 27.25 29.5302 29.8 25.805C30.775 29.3127 31.275 33.0108 31.275 36.7904C31.275 43.9963 25.9 49.8425 19.275 49.8425Z\"\n                                                    fill=\"#243C4B\"\n                                                    fillOpacity={isVoted ? 1 : 0.6}\n                                                />\n                                            </svg>\n                                            <span className=\"text\">Helpful{!isVoted ? \"?\" : \"\"}</span>\n                                        </div>\n                                        <div className=\"post-reply\" onClick={toggleReplyButton}>\n                                            <span className=\"icon\">\n                                                <svg\n                                                    className=\"comment--icon\"\n                                                    viewBox=\"0 0 24 24\"\n                                                    fill=\"none\"\n                                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                                >\n                                                    <path\n                                                        d=\"M20.8 1H3.2C1.99 1 1 1.99 1 3.2V23L5.4 18.6H20.8C22.01 18.6 23 17.61 23 16.4V3.2C23 1.99 22.01 1 20.8 1ZM20.8 16.4H5.4L3.2 18.6V3.2H20.8V16.4Z\"\n                                                        fill=\"#243C4B\"\n                                                        stroke=\"#243C4B\"\n                                                        strokeWidth=\"0.5\"\n                                                    />\n                                                </svg>\n                                            </span>\n                                            <span className=\"text\">\n                                                {repliesCount ? (\n                                                    <span className=\"badge badge-lg badge-info\">{repliesCount}</span>\n                                                ) : (\n                                                    \"Reply\"\n                                                )}\n                                            </span>\n                                        </div>\n                                        {repliesCount !== 0 ? (\n                                            <span className=\"replyCount\" id={comment._id} onClick={getCommentReplies}>\n                                                {showReplies ? \"Hide Replies\" : `+${repliesCount} Replies`}\n                                            </span>\n                                        ) : null}\n                                    </div>\n                                    <div className=\"rights\">\n                                        <ReportBtn type=\"comment\" id={comment._id} />\n                                        {comment?.userId?._id === userId || isMod ? (\n                                            <div className=\"post-hide pointer\" onClick={() => deleteReply(comment._id)}>\n                                                <FontAwesomeIcon icon={faTrash} className=\"icon\" />\n                                                <span className=\"text\">Delete</span>\n                                            </div>\n                                        ) : null}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {isReplying && isCommentAllowed ? (\n                <div className=\"pl-3\">\n                    <div className=\"mc-border p-2 mt-3\">\n                        <Row className=\"align-items-center\">\n                            <Col className=\"flex-1\">\n                                <input\n                                    name=\"body\"\n                                    id=\"body\"\n                                    className=\"form-control form-input2\"\n                                    type=\"text\"\n                                    placeholder=\"Comment Reply\"\n                                    onChange={handleChange}\n                                    value={reply.body}\n                                />\n                            </Col>\n                            <div style={{ width: \"130px\" }}>\n                                <button type=\"button\" className={\"btn btn-md btn-signup\"} onClick={postCommentReply}>\n                                    Reply\n                                </button>\n                            </div>\n                        </Row>\n                    </div>\n                </div>\n            ) : null}\n            {showReplies && (\n                <React.Fragment>\n                    {replies.map(reply => (\n                        <CommentItem\n                            isMod={isMod}\n                            deleteReply={onDelete}\n                            isCommentAllowed={isCommentAllowed}\n                            comment={reply}\n                            totalReplies={reply.repliesCount}\n                            key={reply._id}\n                            postID={postID}\n                        />\n                    ))}\n                    {repliesCount > replies.length ? (\n                        <div className=\"text-center\">\n                            <button onClick={getReplies} className=\"text-muted btn font-weight-bold show__more-btn\">\n                                Load More\n                            </button>\n                        </div>\n                    ) : null}\n                </React.Fragment>\n            )}\n        </div>\n    )\n}\n\nexport default CommentItem\n","import React, { FC, useEffect, useState } from \"react\"\nimport { CommentReplies } from \"../../../../Interface/Comments/CommentsInterface\"\nimport CommentItem from \"./CommentItem\"\nimport { PostCommentsService } from \"../../../../Helpers/Request/Services/Comments/PostComments\"\n\n//@ts-ignore\nimport { Fade, Bounce} from 'react-reveal';\n\ntype PostComments = {\n    isMod: boolean\n    comments: CommentReplies[]\n    isCommentAllowed: boolean\n    fetchComments: () => void\n    hasMoreComments: boolean\n    postId?:string \n}\n\nconst PostComments: FC<PostComments> = ({\n    comments,\n    isCommentAllowed,\n    fetchComments,\n    hasMoreComments = true,\n    isMod = false,\n}) => {\n    const [allComments, setAllComments] = useState<CommentReplies[]>([...comments])\n\n    useEffect(() => {\n        console.log('checking comments ', comments)\n        setAllComments(comments)\n    }, [comments])\n\n    const onDelete = (id: string) => {\n        PostCommentsService.delete(id, isMod).then(() => {\n            const rep = allComments.filter(reply => reply._id !== id)\n            setAllComments(rep)\n        })\n    }\n \n    // const [] = useState<Record<string, any>>({})\n\n    return (\n        <React.Fragment>\n            {allComments.map(item => (\n                <Fade enter={true} down delay={300}>\n                    <CommentItem\n                        isMod={isMod}\n                        deleteReply={onDelete}\n                        isCommentAllowed={isCommentAllowed}\n                        key={item._id}\n                        comment={item}\n                        totalReplies={item.repliesCount}\n                        postID={item.postId} />\n                </Fade>\n            ))}\n            {hasMoreComments ? (\n                <div className=\"text-center\">\n                    <button onClick={fetchComments} className=\"text-muted btn font-weight-bold show__more-btn\">\n                        Load More\n                    </button>\n                </div>\n            ) : null}\n        </React.Fragment>\n    )\n}\n\nexport default PostComments\n","import React, { ChangeEvent, ReactElement, useEffect, useRef, useState } from \"react\"\nimport { useLocation, useParams, Link } from \"react-router-dom\"\nimport ReactCSSTransitionGroup from \"react-transition-group\"\nimport SignInAlert from \"../../../Container/NotLoggedIn/SignInAlert\"\nimport MainContent from \"../../../Controller/Main/Content\"\nimport CommunitiesList from \"../../../Helpers/Request/Services/Communities/Communities\"\nimport Post from \"../../../Helpers/Request/Services/Post/Post\"\nimport CommentBox from \"./Components/CommentBox\"\nimport PostComments from \"./Components/PostComments\"\nimport { PostedImage } from \"../../../Shared/Images/Images\"\nimport { isLoggedIn } from \"../../../Hooks/Auth/getAuth\"\nimport { PostCommentsService } from \"../../../Helpers/Request/Services/Comments/PostComments\"\nimport assetUrl from \"../../../Helpers/Functions/assetUrl\"\nimport { FeedType } from \"../../../Interface/Home/FeedsInterface\"\nimport PostItem from \"../../../Controller/Home/Posts/PostItem\"\n\nconst comRef: any = React.createRef()\n\nconst PostDetails = (): ReactElement => {\n    const { id } = useParams<{ id: string }>()\n    const { state }: any = useLocation()\n    const [page, setPage] = useState(1)\n    const [comments, setComments] = useState<any>({\n        comments: [],\n        totalVotes: 0,\n        totalReplies: 0,\n    })\n    const [values, setValues] = useState({\n        postId: id,\n        body: \"\",\n    })\n    // let commentTest = useRef({postId: id, body: \"\"});\n    const [details, setDetails] = useState<FeedType | undefined>(state || undefined)\n    const [auth] = useState(isLoggedIn)\n\n    const onChange = (e?: ChangeEvent<HTMLInputElement>) => {\n        if (e) {\n            setValues({ ...values, [e.target.name]: e.target.value })\n        } else {\n            setValues({ ...values, body: \"\" })\n        }\n\n        // commentTest = {postId: id, body: e.target.value};\n    }\n\n    const getComments = () => setPage(page + 1)\n\n    const fetchComments = () => {\n        PostCommentsService.getTopLevelComments(id || \"\", {}, page).then(response => {\n            const { docs, upVoteCount, downVoteCount, totalDocs } = response.data.body\n            setComments({\n                comments: [...comments.comments, ...docs],\n                totalVotes: upVoteCount - downVoteCount,\n                totalReplies: totalDocs,\n            })\n            setValues({\n                ...values,\n                body: \"\",\n            })\n        })\n    }\n\n    useEffect(() => {\n        fetchComments()\n    }, [page])\n\n    useEffect(() => {\n        document.addEventListener(\"comment-success\", fetchComments)\n        return () => document.removeEventListener(\"comment-success\", fetchComments)\n        // eslint-disable-next-line\n    }, [])\n\n    useEffect(() => {\n        Post.detailsById(id).then(response => {\n            setDetails(response.data.data)\n        })\n    }, [id])\n\n    const joinCommunity = (communityId: string) => {\n        CommunitiesList.joinCommunity(communityId)\n    }\n\n    const afterComment = (data: any) => {\n        onChange()\n        // setValues({ ...values, body: \"\" })\n        let comment = values\n        comment.body = \"\"\n        setValues({ ...values })\n        setComments({ ...values, comments: [data, ...comments.comments] })\n        scroll()\n    }\n\n    const scroll = () => {\n        let wScroll = window.scrollY\n        let scrollTo = wScroll + 130 // comRef.current.offsetTop;\n        window.scrollTo(0, scrollTo)\n    }\n\n    return (\n        <MainContent\n            asideRightContent={\n                <div className=\"mc-border mt-5 mt-lg-0 mb-3\">\n                    <div className=\"group-wrap\">\n                        <div className=\"grp-header d-flex justify-content-between\">\n                            <Link to={`/community/details/${details?.knowledgeGroup?._id}`}>\n                                <div className=\"d-flex flex-row align-items-center \">\n                                    <div className=\"image mr-2 profile-image\">\n                                        <img\n                                            src={\n                                                details?.knowledgeGroup?.logo\n                                                    ? assetUrl(details.knowledgeGroup?.logo)\n                                                    : PostedImage\n                                            }\n                                            alt=\"profile\"\n                                        />\n                                    </div>\n                                    <div className=\"d-flex flex-column\">\n                                        <div className=\"grp-name\">{details?.knowledgeGroup?.name}</div>\n                                        <div className=\"grp-members\">\n                                            <span>Members</span>\n                                            <span className={\"ml-2\"}>{details?.knowledgeGroup?.members || 0}</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </Link>\n                        </div>\n                        <p className=\"general-text pt-2 mb-0\">{details?.knowledgeGroup?.description || \"\"}</p>\n                        <div className=\"form-group mt-3\">\n                            {(auth && (\n                                <button\n                                    className=\"btn btn-view\"\n                                    onClick={() => joinCommunity(details?.knowledgeGroup?._id || \"\")}\n                                >\n                                    JOINED\n                                </button>\n                            )) || <SignInAlert />}\n                        </div>\n                    </div>\n                </div>\n            }\n        >\n            {details ? (\n                <PostItem\n                    totalComments={comments.totalReplies}\n                    post={details}\n                    idx={0}\n                    isUser={true}\n                    topMargin={false}\n                    hideAward={false}\n                />\n            ) : null}\n            <CommentBox\n                isCommentAllowed={!!details?.isJoined}\n                onChange={onChange}\n                data={values.body}\n                postId={values.postId}\n                // afterComment={fetchComments}\n                afterComment={(data: any) => afterComment(data)}\n                submitUrl={\"/comment\"}\n            />\n            <div ref={comRef}></div>\n            <PostComments\n                isMod={!!details?.isComMod}\n                hasMoreComments={comments.totalReplies > comments.comments.length}\n                fetchComments={getComments}\n                isCommentAllowed={!!details?.isJoined}\n                comments={comments.comments}\n            />\n        </MainContent>\n    )\n}\n\nexport default PostDetails\n"],"sourceRoot":""}