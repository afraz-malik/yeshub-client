{"version":3,"sources":["Helpers/Request/Services/uploadFile/FileUpload.ts","Helpers/RegularExpressions/isUrl.ts","Shared/ImageUploader/index.tsx","Views/Modinbox/index.tsx"],"names":["Post","uploadFile","data","axiosService","post","deleteFile","file","delete","isURL","url","REG_EXP_URL","test","style","width","opacity","ImageUpload","React","createRef","props","state","imagePreviewUrl","imageShow","inputFile","loading","fileBtn","onImageChange","onSentMessage","_handleImageChange","bind","_handleSubmit","onClose","_handleFile","EventBus","on","console","log","setState","e","preventDefault","this","current","click","reader","FileReader","target","files","formData","FormData","append","onloadend","result","readAsDataURL","imageUploadStarts","FileUpload","then","res","onImageClosed","className","onClick","src","alt","ref","id","type","onChange","Component","padding","baseurl","window","location","protocol","process","imageUrl","image","isBaseImg","isFullImageUrl","btnPrimaryStyle","borderRadius","borderTopLeftRadius","btnDangerStyle","borderTopRightRadius","ht","height","spliceArray","array","obj","i","length","conversationID","splice","messagesEnd","messagesRef","ModIndex","border","overflow","clearCounter","threads","selectedUser","counter","seen","toggle","isOpen","unarchive","conID","chat","unArchiveChat","Notification","message","activeThreads","push","resp","archivedThreads","getMessages","messages","error","archive","archiveChat","msgSeen","dispatch","detail","scrollToBottom","scrollIntoView","behavior","block","selectUser","user","ChatStorage","hasMessages","getMessagesByConversation","setMessages","sendMessage","msg","currentMsg","currentImage","sendToConversation","addNewMessage","handleChange","value","onChildImageChange","schedule","setInterval","getUserThreads","archived","_threads","getAllThreads","key","updateThread","ID","lastMessage","activateThreads","isActive","setTimeout","toggleThreads","componentDidMount","logThreads","userID","paramID","document","body","addEventListener","getThreadsForMods","forEach","thread","componentWillUnmount","removeEventListener","match","params","JSON","parse","localStorage","getItem","_id","onKeyUp","event","keyCode","charCode","map","index","logo","name","slice","isMod","href","from","userId","userImage","rel","formatTime","createdAt","onFocus","onFocusCapture","xmlns","viewBox","transform","fill","d","float","clear"],"mappings":"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","file":"static/js/19.88dfa718.chunk.js","sourcesContent":["import axiosService from \"../../axiosService\"\n\nconst Post = {\n    uploadFile: (data: FormData) => axiosService.post(`media/upload`, data),\n    deleteFile: (file: string) => axiosService.delete(`media/upload`, {data: {file: file}})\n}\n\nexport default Post","import { REG_EXP_URL } from \"../../Constants/constants\"\n\nexport const isURL = (url: string) => {\n    return REG_EXP_URL.test(url)\n}\n","import React, { Component } from 'react';\nimport FileUpload from '../../Helpers/Request/Services/uploadFile/FileUpload';\nimport EventBus from '../../Helpers/Request/Services/event-bus';\n\nconst style = {\n    width: \"60px\",\n    opacity: .4\n}\nconst fileBtn = React.createRef<HTMLInputElement>();\n// const onImageChange = () => {}\nclass ImageUpload extends Component<any, any> {\n    constructor(props: any) {\n      super(props);\n      this.state = {\n        file: '',\n        imagePreviewUrl: '',\n        imageShow: false,\n        inputFile: {},\n        loading:false,\n        fileBtn: {},\n        onImageChange: ()=>{}\n      };\n\n      this.onSentMessage = this.props.onSentMessage;\n      this._handleImageChange = this._handleImageChange.bind(this);\n      this._handleSubmit = this._handleSubmit.bind(this);\n      this.onClose = this.onClose.bind(this);\n      this._handleFile = this._handleFile.bind(this);\n      EventBus.on('message-sent', () => {\n        console.log('message recieved in child using even bus');\n        this.setState({imageShow: false});\n        this.setState({imagePreviewUrl: \"\"});\n        this.setState({loading: false});\n      })      \n    }\n  \n    onSentMessage(data: any) {\n      console.log('event recieved inside child component ...');\n    }\n    \n    _handleSubmit(e: any) {\n      e.preventDefault();\n      // TODO: do something with -> this.state.file\n    }\n\n    _handleFile(e: any) {\n      e.preventDefault();\n      this.state.fileBtn.current?.click();\n      console.log(this.state.fileBtn);\n    }\n  \n    _handleImageChange(e: any) {\n    //   e.preventDefault();\n  \n      let reader = new FileReader();\n      this.setState({inputFile: e.target});\n      this.setState({loading: true})\n      let file = e.target.files[0];\n      let formData = new FormData();\n      formData.append('images', file);\n      \n      reader.onloadend = () => {\n        this.setState({\n          file: file,\n          imagePreviewUrl: reader.result,\n          imageShow: true\n        });\n      }\n  \n      reader.readAsDataURL(file)\n      this.props.imageUploadStarts();\n      FileUpload.uploadFile(formData)\n      .then(res => {\n          console.log(res.data);\n          this.props.onImageChange(res.data.data);\n          this.setState({loading: false});\n      })\n    }\n  \n    onClose() {\n      this.setState({inputFile: null});\n      this.setState({imagePreviewUrl: \"\"});\n      this.setState({imageShow: false});\n      this.setState({loading: false});\n      this.props.onImageClosed(\"\");\n    }\n    render() {\n    //   let imagePreviewUrl = this.state.imagePreviewUrl;\n    //   let $imagePreview = null;\n    //   if (this.state.imagePreviewUrl) {\n    //     $imagePreview = (<img src={imagePreviewUrl} />);\n    //   }\n  \n      return (\n        <div className=\"image--uploader--container flex\">\n          {!this.state.imageShow ? \"\" : <div className=\"full--width\"> <i onClick={this.onClose} className=\"fa image--uploader--close fa-times-circle-o text-danger\"></i> </div>}\n          {this.state.loading ? <div className=\"image--uploader--loading\">\n                                    <i className=\"centered fa fa-spinner fa-pulse\"></i>\n                                    </div> \n                              : \"\"}\n          {this.state.imagePreviewUrl ? <img style={style} src={this.state.imagePreviewUrl} alt=\"\"/> : \"\"}\n          {\n            !this.state.imageShow ?   \n              (\n                <>\n                  {/* <button className=\"btn btn-default\"> */}\n                    <i  onClick={this._handleFile} className=\"fa fa-picture-o lg-fonts\"></i>\n                    {/* </button> */}\n                  <input ref={this.state.fileBtn} id=\"image--uploader--button\" className=\"class--hidden\" type=\"file\" onChange={this._handleImageChange} />\n                </>\n              )\n              : \"\"\n            }\n        </div>\n      )\n    }\n  }\n\n  export default ImageUpload","\nimport React, { useState, useEffect } from \"react\"\nimport Notification from '../../Shared/Notification/Notification';\n\nimport { useParams } from \"react-router-dom\"\n\nimport { DefaultContent } from \"../../Controller/Main/ContentWithCommunities\"\n\nimport { chat } from \"../../Helpers/Request/Services/chat/chat\"\nimport { formatTime } from \"../../Helpers/Date/time\"\nimport isBaseImg from \"../../Helpers/Functions/isBaseImg\"\nimport isFullImageUrl from \"../../Helpers/Functions/isFullImageUrl\"\nimport EventBus from \"../../Helpers/Request/Services/event-bus\"\nimport { isURL } from \"../../Helpers/RegularExpressions/isUrl\"\nimport { userId } from \"../../Constants/getUserId\"\nimport ImageUpload from \"../../Shared/ImageUploader\"\nimport ChatStorage from '../../Helpers/chatstorage';\n\nconst padding = {\n    'padding': '0 2px'\n}\n\nconst baseurl = `${window.location.protocol}//${process.env.REACT_APP_API_URL}/`\ntype state = {\n    selectedUser: any\n    messages: []\n    currentMsg: any\n    threads: any[]\n    paramID: any\n    userID: any\n    currentImage: any\n    isOpen: any\n    isActive: any\n    archivedThreads: any[]\n    activeThreads: any[]\n}\ntype routeparam = {\n    id: any\n}\n\nconst imageUrl = (image: string) => {\n    if (isBaseImg(image)) {\n        return image\n    }\n\n    if (isFullImageUrl(image)) {\n        return image\n    }\n\n    return baseurl + image\n}\nconst btnPrimaryStyle = {\n    width: \"50%\",\n    borderRadius: '0px',\n    borderTopLeftRadius: '10px'\n}\nconst btnDangerStyle = {\n    width: \"50%\",\n    borderRadius: '0px',\n    borderTopRightRadius: '10px'\n}\n\nconst ht = {\n    height: \"68px\",\n}\n\nconst spliceArray = (array: any[], obj: any) => {\n    for (let i = 0; i < array.length; i++) {\n        if (array[i].conversationID == obj.conversationID) {\n            array.splice(i, 1)\n            break\n        }\n    }\n\n    return array\n}\n\nconst messagesEnd = React.createRef<any>()\nconst messagesRef = React.createRef<any>()\nclass ModIndex extends React.Component<any, state, routeparam> {\n    constructor(props: any) {\n        super(props)\n\n        this.state = {\n            selectedUser: {},\n            messages: [],\n            currentMsg: \"\",\n            threads: [],\n            archivedThreads: [],\n            activeThreads: [],\n            paramID: this.props.match.params.id,\n            currentImage: \"\",\n            userID: JSON.parse(localStorage.getItem(\"STORAGE_USER_PROFILE\") || \"{}\")._id || \"\",\n            isActive: true,\n            isOpen: false,\n        }\n\n        // this.state.selectedUser = this.state.users[0];\n        // this.setState({selectedUser: this.state.users[0]})\n        this.selectUser = this.selectUser.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.sendMessage = this.sendMessage.bind(this)\n        this.onChildImageChange = this.onChildImageChange.bind(this)\n        this.onImageClosed = this.onImageClosed.bind(this)\n        this.onKeyUp = this.onKeyUp.bind(this)\n        this.toggle = this.toggle.bind(this)\n        this.activateThreads = this.activateThreads.bind(this)\n        this.archive = this.archive.bind(this)\n        this.unarchive = this.unarchive.bind(this)\n        this.clearCounter = this.clearCounter.bind(this)\n    }\n\n    style = {\n        height: \"350px\",\n        border: \"1px solid gray\",\n        padding: \"10px\",\n        overflow: \"auto\",\n    }\n\n    clearCounter =() => {\n        let threads = this.state.threads;\n        for(let i=0; i<threads.length; i++) {\n            if(threads[i].conversationID === this.state.selectedUser.conversationID) {\n                threads[i].counter = 0;\n                threads[i].seen = true;\n                break;\n            }\n        }\n        this.setState({threads: threads});\n    }\n\n    toggle = () => {\n        console.log(\"toggleing ...\")\n        this.setState({ isOpen: !this.state.isOpen })\n    }\n\n    unarchive = (conID: string) => {\n        chat.unArchiveChat(conID).then(\n            res => {\n                Notification(res.data.message?res.data.message : \"Conversation Unarchived successfully\", \"success\");\n                this.state.activeThreads.push(this.state.selectedUser)\n                let resp = spliceArray(this.state.archivedThreads, this.state.selectedUser)\n                this.setState({ archivedThreads: resp })\n                this.setState({\n                    selectedUser: this.state.archivedThreads[0] || {},\n                    threads: this.state.archivedThreads,\n                })\n                if (!this.state.selectedUser.conversationID) {\n                    this.setState({ messages: [] })\n                } else {\n                    this.getMessages(this.state.selectedUser.conversationID)\n                }\n            },\n            error => console.log(error.message)\n        )\n    }\n\n    archive = (conID: string) => {\n        chat.archiveChat(conID).then(\n            res => {\n                // TODO add toaster\n                Notification(res.data.message ? res.data.message : \"Conversation Archived Successfully\", \"success\")\n                this.state.archivedThreads.push(this.state.selectedUser)\n                let resp = spliceArray(this.state.activeThreads, this.state.selectedUser)\n                this.setState({ activeThreads: resp })\n                this.setState({ selectedUser: this.state.activeThreads[0] || {}, threads: this.state.activeThreads })\n                if (!this.state.selectedUser.conversationID) {\n                    this.setState({ messages: [] })\n                } else {\n                    this.getMessages(this.state.selectedUser.conversationID)\n                }\n                console.log(\"conversation ID \", conID)\n            },\n            error => console.log(error.message)\n        )\n    }\n\n    msgSeen = () => {\n        EventBus.dispatch(\"msg-seen\", { detail: null })\n    }\n\n    scrollToBottom = () => {\n        messagesEnd.current.scrollIntoView({ behavior: \"smooth\", block: \"end\" })\n    }\n\n    selectUser = (user: any) => {\n        console.log(\"user is selected\", user)\n        this.setState({ selectedUser: user })\n        if(ChatStorage.hasMessages(user.conversationID)) {\n            this.setState({messages: ChatStorage.getMessages(user.conversationID)}, () => {\n                this.scrollToBottom();\n            });\n            \n            return;\n        }\n\n        chat.getMessagesByConversation(user.conversationID).then(res => {\n            console.log(res.data)\n            this.setState({ messages: res.data })\n            ChatStorage.setMessages(user.conversationID, res.data);\n            this.scrollToBottom()\n        })\n    }\n\n    getMessages(id: any) {\n        if (!id || id == \"\") this.setState({ messages: [] });\n\n        if(ChatStorage.hasMessages(id)) {\n            this.setState({messages: ChatStorage.getMessages(id)});\n            this.scrollToBottom();\n            return;\n        }\n\n        chat.getMessagesByConversation(id).then(res => {\n            console.log(res.data)\n            this.setState({ messages: res.data })\n            ChatStorage.setMessages(id, res.data);\n            this.scrollToBottom()\n        })\n    }\n\n    onKeyUp(event: any) {\n        event.preventDefault()\n        if (event.keyCode === 13 || event.charCode === 13) {\n            this.sendMessage(event)\n        }\n    }\n\n    sendMessage = (e: any) => {\n        e.preventDefault()\n        let msg: { message: string; image?: string } = { message: this.state.currentMsg }\n        if (this.state.currentImage) {\n            msg[\"image\"] = this.state.currentImage\n        }\n        chat.sendToConversation(this.state.selectedUser.conversationID, msg).then(\n            res => {\n                console.log(\"message sent \", res.data);\n                ChatStorage.addNewMessage(res.data.data.conversationID, res.data.data);\n                this.setState({messages: ChatStorage.getMessages(res.data.data.conversationID)});\n                this.scrollToBottom()\n                // this.getMessages(this.state.selectedUser.conversationID)\n            },\n            error => console.log(error)\n        )\n        this.setState({ currentMsg: \"\" })\n        this.setState({ currentImage: \"\" })\n        \n        EventBus.dispatch(\"message-sent\", {})\n    }\n\n    handleChange = (e: any) => {\n        this.setState({ currentMsg: e.target.value })\n    }\n\n    onImageClosed = (data: string) => this.setState({ currentImage: data })\n\n    onChildImageChange = (data: any) => {\n        this.setState({ currentImage: data })\n    }\n\n    schedule = () => {\n        const interval = setInterval(() => this.getMessages(this.state.selectedUser.conversationID), 5000)\n    }\n \n    getUserThreads = () => {\n        let threads = [];\n        let archived = [];\n        let _threads = ChatStorage.getAllThreads();\n        console.log(_threads);\n        for(let key in _threads) {\n            threads.push(..._threads[key].data);\n            archived.push(..._threads[key].archived);\n        }\n        console.log('threads', threads);\n        console.log('archived', archived);\n\n        this.setState({threads: threads});\n        this.setState({activeThreads: threads});\n        this.setState({ archivedThreads: archived })\n        this.setState({ selectedUser: threads[0] || {} })\n        this.getMessages(threads[0].conversationID || \"\");\n\n        /*if(!ChatStorage.hasThread('user')) {\n            chat.getAllThreads().then(\n                res => {\n                    let threads = res.data.data;\n                    \n                    threads.forEach((thread :any)=> {thread.counter = 0; thread.seen = true});\n                    // this.setState({ threads: res.data.data })\n                    this.setState({ threads: threads })\n                    this.setState({ activeThreads: res.data.data })\n                    this.setState({ archivedThreads: res.data.archived })\n                    this.setState({ selectedUser: res.data.data[0] || {} })\n                    \n                    this.getMessages(res.data?.data[0]?.conversationID || \"\")\n                    console.log(threads);\n                },\n                error => console.log(\"error\", error)\n            )\n        } else {\n            let active_threads = ChatStorage.getThreads('user-threads');\n            let archive_threads = ChatStorage.getThreads('user-threads');\n                    \n            active_threads.forEach((thread :any)=> {thread.counter = 0; thread.seen = true});\n            // this.setState({ threads: res.data.data })\n            this.setState({ threads: active_threads })\n            this.setState({ activeThreads: active_threads })\n            this.setState({ archivedThreads: archive_threads })\n            this.setState({ selectedUser: active_threads[0] || {} })\n            \n            this.getMessages(active_threads[0]?.conversationID || \"\")\n            console.log(active_threads);\n        }*/\n    }\n\n    updateThread = (ID: string, msg?: any) => {\n        console.log(msg);\n        let threads = this.state.threads\n        for (let i = 0; i < threads.length; i++) {\n            if (threads[i].conversationID == ID) {\n                threads[i].seen = false;\n                threads[i].counter += 1;\n                                \n                threads[i].lastMessage = msg.message;\n                ChatStorage.addNewMessage(ID, msg);\n                break\n            }\n        }\n\n        if(this.state.selectedUser.conversationID == ID) {\n            this.setState({messages: ChatStorage.getMessages(ID)});\n            this.scrollToBottom();\n        }\n\n        this.setState({ threads: threads })\n        // this.setState({ selectedUser: threads[0] })\n        // this.getMessages(ID)\n    }\n\n    activateThreads = () => {\n        if (!this.state.isActive) {\n            this.setState({\n                threads: this.state.activeThreads,\n            })\n\n            this.setState({\n                isActive: true,\n            })\n\n            this.setState({\n                selectedUser: this.state.activeThreads[0] || {},\n            })\n\n            setTimeout(() => {\n                if (this.state.selectedUser.conversationID) {\n                    this.getMessages(this.state.selectedUser.conversationID)\n                } else {\n                    this.setState({ messages: [] })\n                }\n            }, 100)\n        }\n    }\n\n    toggleThreads = (e: any) => {\n        // e.preventDefault();\n\n        if (this.state.isActive) {\n            this.setState({ isActive: false })\n            this.setState({ threads: this.state.archivedThreads })\n            {\n                this.setState({ selectedUser: this.state.archivedThreads[0] || {} })\n\n                setTimeout(() => {\n                    if (this.state.selectedUser.conversationID) {\n                        this.getMessages(this.state.selectedUser.conversationID)\n                    } else {\n                        this.setState({ messages: [] })\n                    }\n                }, 0)\n            }\n        }\n    }\n\n    componentDidMount = () => {\n        console.log('this is mod inbox');\n        ChatStorage.logThreads();\n        EventBus.on(\"message-\" + this.state.userID, (data: any) => {\n            console.log('new message', data);\n            this.updateThread(data.detail.conversationID, data.detail);\n        })\n\n        EventBus.on(\"com-message-\" + this.state.paramID, (data: any) => {\n            // for this community message\n            console.log('new message', data.detail);\n            this.updateThread(data.detail.conversationID, data.detail)\n        })\n\n        document.body.addEventListener(\"click\", () => {\n            console.log(\"clicked window\")\n            if (this.state.isOpen) {\n                setTimeout(() => {\n                    this.setState({ isOpen: false })\n                }, 200)\n            }\n        })\n\n        if (this.state.paramID == \"user\") {\n            this.getUserThreads()\n        } else {\n            chat.getThreadsForMods(this.state.paramID).then(res => {\n                console.log(res.data)\n                let threads = res.data.data;\n                console.log(threads);\n                threads.forEach((thread :any)=> {thread.counter = 0; thread.seen = true;});\n                this.setState({ threads: threads })\n                this.setState({ activeThreads: res.data.data })\n                this.setState({ archivedThreads: res.data.archived })\n                this.setState({ selectedUser: res.data.data[0] || {} })\n\n                this.getMessages(res.data.data[0]?.conversationID || \"\")\n            })\n        }\n    }\n\n    componentWillUnmount = () => {\n        document.body.removeEventListener(\"click\", () => {})\n    }\n\n    render() {\n        return (\n            <DefaultContent>\n                <div className=\"container\" style={padding}>\n                    <div className=\"row\">\n                        <div className=\"col-md-4\" style={padding}>\n                            <div className=\"messages--list custom--bg\">\n                                <div className=\"flex\">\n                                    <button\n                                        onClick={this.activateThreads}\n                                        style={btnPrimaryStyle}\n                                        className={`btn btn-outline-primary ${this.state.isActive ? \"active\" : \"\"}`}\n                                    >\n                                        Active\n                                    </button>\n                                    <button\n                                        onClick={this.toggleThreads}\n                                        style={btnDangerStyle}\n                                        className={`btn btn-outline-danger ${!this.state.isActive ? \"active\" : \"\"}`}\n                                    >\n                                        Archived\n                                    </button>\n                                </div>\n\n                                {this.state.threads.map((thread, index) => {\n                                    return (\n                                        <div\n                                            onClick={() => this.selectUser(thread)}\n                                            className={`sidebar--item ${\n                                                thread.conversationID == this.state.selectedUser.conversationID\n                                                    ? \"active\"\n                                                    : \"\"\n                                            }`}\n                                        >\n                                            <div className=\"d-flex align-items-center\">\n                                                <img className=\"user--img\" src={imageUrl(thread.logo)} alt={\"\"} />\n                                                <p className={!thread.seen ? \"text--bold\" : \"\"}>\n                                                    {thread.name} {thread.counter !== 0 ? <span className=\"badge badge-primary pull-right\">{thread.counter}</span> : \"\"}\n                                                </p>\n                                            </div>\n                                            <p className=\"last--message\">\n                                                {thread.lastMessage\n                                                    ? thread.lastMessage.slice(0, 6) +\n                                                      (thread.lastMessage.length > 10 ? \"...\" : \"\")\n                                                    : \"No Message\"}\n                                                {/* <small className=\"float-right\">{user.lastTime ? formattedTime(user.lastTime) : \"\"}</small> */}\n                                            </p>\n                                        </div>\n                                    )\n                                    // <li key={ index }  onClick={() => this.selectUser(thread)}> {thread.name}</li>;\n                                })}\n                            </div>\n                        </div>\n                        <div className=\"col-md-8\" style={padding}>\n                            <div className=\"custom--bg message--details\">\n                                <div className=\"d-flex justify-content-between border-bottom mb-2 pb-2\">\n                                    <div className=\"message--header d-flex align-items-center\">\n                                        <img\n                                            className=\"user--img\"\n                                            src={\n                                                this.state.selectedUser?.logo\n                                                    ? imageUrl(this.state.selectedUser.logo)\n                                                    : \"\"\n                                            }\n                                        />\n                                        <p className=\"user--name mb-0 ml-1\">\n                                            {\n                                                this.state.selectedUser.isMod \n                                                ? <a href={`/community/details/${this.state.selectedUser._id || this.state.paramID}`}><strong>{this.state.selectedUser?.name}</strong></a>\n                                                : <strong>{this.state.selectedUser?.name}</strong>\n                                            }\n                                            \n                                        </p>\n                                        {!this.state.selectedUser.name ? (\n                                            <p className=\"user--name mb-0 ml-1\">\n                                                <strong>No Threads Available</strong>\n                                            </p>\n                                        ) : (\n                                            \"\"\n                                        )}\n                                    </div>\n                                    <div className=\"dots\" onClick={this.toggle}>\n                                        <div className=\"dots\">\n                                            <div className=\"dot\"></div>\n                                            <div className=\"dot\"></div>\n                                            <div className=\"dot\"></div>\n                                        </div>\n                                        {this.state.isOpen && this.state.selectedUser.conversationID ? (\n                                            <div className=\"dropdown--archive\">\n                                                {this.state.isActive ? (\n                                                    <span\n                                                        onClick={() =>\n                                                            this.archive(this.state.selectedUser.conversationID)\n                                                        }\n                                                    >\n                                                        Archive\n                                                    </span>\n                                                ) : (\n                                                    <span\n                                                        onClick={() =>\n                                                            this.unarchive(this.state.selectedUser.conversationID)\n                                                        }\n                                                    >\n                                                        unarchive\n                                                    </span>\n                                                )}\n                                            </div>\n                                        ) : (\n                                            \"\"\n                                        )}\n                                    </div>\n                                </div>\n                                <div className=\"overflow\" ref={messagesRef}>\n                                    {!this.state.messages.length\n                                        ? \"No Message Found\"\n                                        : this.state?.messages?.map((message: any, index: any) => {\n                                              return (\n                                                  <div\n                                                      className={`message--item-container d-flex ${\n                                                          !message.from ? \"welcome-message\" : \"\"\n                                                      }  ${userId == message.from?._id ? \"received\" : \"\"}`}\n                                                  >\n                                                      <div className=\"message--item d-flex flex-nowrap \">\n                                                          {!message.from ? (\n                                                              \"\"\n                                                          ) : (\n                                                              <img\n                                                                  src={\n                                                                      message.from?.userImage\n                                                                          ? imageUrl(message?.from?.userImage)\n                                                                          : \"\"\n                                                                  }\n                                                                  alt=\"\"\n                                                                  className=\"user--img\"\n                                                              />\n                                                          )}\n                                                          <div className=\"message wordwrap\">\n                                                              <p className={`${!message.from ? \"welcome\" : \"text\"}`}>\n                                                                  {isURL(message.message) ? (\n                                                                      <a\n                                                                          href={message.message}\n                                                                          className={\"message-link\"}\n                                                                          target={\"_blank\"}\n                                                                          rel={\"noopener noreferrer\"}\n                                                                      >\n                                                                          {message.message}\n                                                                      </a>\n                                                                  ) : (\n                                                                      message.message\n                                                                  )}\n\n                                                                  {!message.image ? (\n                                                                      \"\"\n                                                                  ) : (\n                                                                      <img\n                                                                          className=\"message--img\"\n                                                                          src={baseurl + message.image}\n                                                                      />\n                                                                  )}\n                                                              </p>\n                                                              {message.seen && (\n                                                                  <small className=\"text-muted\">&#10003; seen</small>\n                                                              )}\n                                                              <span className=\"time\">\n                                                                  {formatTime(message.createdAt)}\n                                                              </span>\n                                                          </div>\n                                                      </div>\n                                                  </div>\n                                              )\n                                          })}\n                                    <form>\n                                        <div className=\"message--input\">\n                                            <div className=\"flex\">\n                                                <ImageUpload\n                                                    onImageClosed={this.onImageClosed}\n                                                    onSentMessage={this.sendMessage}\n                                                    onImageChange={this.onChildImageChange}\n                                                    imageUploadStarts={() => {}}\n                                                />\n                                                <textarea\n                                                    style={ht}\n                                                    onKeyUp={this.onKeyUp}\n                                                    name=\"message\"\n                                                    className=\"form-control h-40\"\n                                                    onFocus={this.msgSeen}\n                                                    value={this.state.currentMsg}\n                                                    onChange={this.handleChange}\n                                                    onFocusCapture={this.clearCounter}\n                                                ></textarea>\n                                                <button className=\"btn send--btn\" onClick={this.sendMessage}>\n                                                    <svg\n                                                        xmlns=\"http://www.w3.org/2000/svg\"\n                                                        width=\"39.881\"\n                                                        height=\"34.183\"\n                                                        viewBox=\"0 0 39.881 34.183\"\n                                                    >\n                                                        <g transform=\"translate(0 0)\">\n                                                            <g transform=\"translate(0 0)\">\n                                                                <path\n                                                                    fill=\"#243c4b\"\n                                                                    d=\"M.019,32,0,45.294l28.486,3.8L0,52.89.019,66.183,39.881,49.092Z\"\n                                                                    transform=\"translate(0 -32)\"\n                                                                />\n                                                            </g>\n                                                        </g>\n                                                    </svg>\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </form>\n\n                                    <div style={{ float: \"left\", clear: \"both\" }} ref={messagesEnd}></div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </DefaultContent>\n        )\n    }\n}\n\nexport default ModIndex;\n"],"sourceRoot":""}