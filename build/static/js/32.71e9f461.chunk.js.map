{"version":3,"sources":["Hooks/useInfiniteScroll.ts","Helpers/Functions/parseNotificationLink.ts","Helpers/Request/Services/Notification/Notification.ts","Views/Profile/Notifications/Components/NotificationItem.tsx","Views/Profile/Notifications/Components/Notifications.tsx","Views/Profile/Notifications/Components/NotificationTopBar.tsx","Views/Profile/Notifications/index.tsx"],"names":["timeOut","useInfiniteScroll","currentPage","useState","page","setPage","pageIncreamentOnScroll","window","innerHeight","scrollY","document","body","offsetHeight","setTimeout","prevValue","useEffect","addEventListener","removeEventListener","parseNotificationLink","link","id","replace","notification","fetch","axiosService","get","actionPerformed","put","read","notificationnHeadings","isAward","heading","type","isNewPost","isPostLiked","isPostDisLiked","isInvitation","isInvitationResponse","isNewJoined","isJoinedPending","isJoiningResponse","isPostComment","isPostApproved","AwardReceived","NotificationItem","item","React","actionsComplete","setActionsComplete","className","isRead","src","CommentIcon","width","alt","notificationType","relativeDate","updatedAt","to","post","_id","community","event","getNotificationId","person","userName","name","message","onClick","notificationID","CommunitiesList","acceptCommunity","then","rejectCommunity","acceptModRequest","rejectModRequest","NotificationItems","notifications","map","key","NotificationContent","loading","NotificationTopBar","NOTIFICATION_RECEIVED_EVENT_DISPATCH","CustomEvent","NOTIFICATION_RECEIVED_EVENT","Notifications","setNotifications","allRead","setAllRead","setLoading","response","data","docs","every","dispatchEvent","Profile"],"mappings":"qHAEIA,EAAiC,KAuBtBC,IArBW,WAAsB,IAArBC,EAAoB,uDAAN,EAAM,EACnBC,mBAAiBD,GADE,mBACpCE,EADoC,KAC9BC,EAD8B,KAGrCC,EAAyB,WACvBC,OAAOC,YAAcD,OAAOE,SAAWC,SAASC,KAAKC,aAAe,KAAmB,OAAZZ,IAC3EA,EAAUa,YAAW,WACjBR,GAAQ,SAAAS,GAAS,OAAIA,EAAY,KACjCd,EAAU,OACX,OAUX,OANAe,qBAAU,WAEN,OADAL,SAASM,iBAAiB,SAAUV,GAC7B,kBAAMI,SAASO,oBAAoB,SAAUX,MAErD,CAACF,IAEG,CAAEA,U,gMClBEc,EAJe,SAACC,EAAcC,GACzC,OAAOD,EAAKE,QAAQ,SAAUD,GAAM,K,OCWzBE,EAVM,CACjBC,MAAO,eAACnB,EAAD,uDAAgB,EAAhB,OAAsBoB,IAAaC,IAAI,yBAAyBrB,IACvEsB,gBAAiB,SAACN,GAAD,IAAaM,EAAb,+DAAkDF,IAAaG,IAAb,+BAAyCP,GAAM,CAE9GM,gBAAiBA,KAGrBE,KAAM,SAACR,GAAD,OAAgBI,IAAaG,IAAb,+BAAyCP,MCO7DS,EAAgD,CAClDC,QAAS,CACLC,QAAS,iBACTC,KAAM,QACNb,KAAM,sBAEVc,UAAW,CACPF,QAAS,WACTC,KAAM,OACNZ,GAAI,OACJD,KAAM,wBAEVe,YAAa,CACTH,QAAS,aACTC,KAAM,OACNZ,GAAI,OACJD,KAAM,wBAEVgB,eAAgB,CACZJ,QAAS,gBACTX,GAAI,OACJY,KAAM,OACNb,KAAM,wBAEViB,aAAc,CACVL,QAAS,aACTC,KAAM,YACNZ,GAAI,YACJD,KAAM,KAEVkB,qBAAsB,CAClBN,QAAS,sBACTC,KAAM,YACNZ,GAAI,YACJD,KAAM,KAEVmB,YAAa,CACTP,QAAS,aACTC,KAAM,YACNZ,GAAI,YACJD,KAAM,6BAEVoB,gBAAiB,CACbR,QAAS,iBACTC,KAAM,YACNZ,GAAI,YACJD,KAAM,6BAEVqB,kBAAmB,CACfT,QAAS,mBACTC,KAAM,YACNZ,GAAI,YACJD,KAAM,6BAEVsB,cAAe,CACXV,QAAS,eACTX,GAAI,OACJY,KAAM,OACNb,KAAM,wBAEV,mBAAoB,CAChBY,QAAS,mBACTC,KAAM,QACNZ,GAAI,QACJD,KAAM,yBAEVuB,eAAgB,CACZX,QAAS,gBACTC,KAAM,OACNZ,GAAI,OACJD,KAAM,wBAEVwB,cAAe,CACXZ,QAAS,iBACTC,KAAM,QACNb,KAAM,oBA6HCyB,EAxH2C,SAAC,GAA4B,IAAD,IAAXC,EAAW,EAAzBvB,aAAyB,EACpCwB,aAAiBD,EAAKnB,iBADc,mBAC3EqB,EAD2E,KAC1DC,EAD0D,KAqDlF,OACI,gBAAC,WAAD,KACI,uBAAKC,UAAS,+CAA0CJ,EAAKK,OAAS,OAAS,KAC3E,uBAAKD,UAAU,oEACX,uBAAKA,UAAU,kCACX,2BACI,wBAAMA,UAAU,iBACZ,uBAAKE,IAAKC,IAAaC,MAAM,KAAKC,IAAI,aAE1C,wBAAML,UAAU,iBACX,UAAApB,EAAsBgB,EAAKU,yBAA3B,eAA8CxB,UAAW,MAItE,2BACI,wBAAMkB,UAAU,WAAWO,YAAaX,EAAKY,cAGrD,gBAAC,IAAD,CACIC,GAAIxC,GACA,UAAAW,EAAsBgB,EAAKU,yBAA3B,eAA8CpC,OAAQ,GAzChD,WAAe,IAAD,IACpC,OAAQ0B,EAAKU,kBACT,IAAK,gBACL,IAAK,YACL,IAAK,cACL,IAAK,iBACL,IAAK,iBACD,OAAO,UAAAV,EAAKc,YAAL,eAAWC,MAAO,GAC7B,IAAK,eACL,IAAK,uBACL,IAAK,cACL,IAAK,kBACL,IAAK,oBACD,OAAO,UAAAf,EAAKgB,iBAAL,eAAgBD,MAAO,GAClC,IAAK,mBACD,OAAOf,EAAKiB,OAAS,GACzB,QACI,MAAO,IAyBCC,KAGHlB,EAAKmB,QAAUnB,EAAKgB,UACjB,uBAAKZ,UAAU,eACX,wBAAMA,UAAU,cAAhB,OAA8BJ,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAMmB,OAAOC,UAC3C,wBAAMhB,UAAU,gBAAhB,MACA,wBAAMA,UAAU,mBAAhB,OAAmCJ,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMgB,UAAUK,OAEvD,KACJ,qBAAGjB,UAAU,iCAAiCJ,EAAKsB,UAE5B,iBAA1BtB,EAAKU,kBAAwCR,EAgB1C,KAfA,uBAAKE,UAAU,8BACX,0BACIA,UAAU,8BACVmB,QAAS,iBArFNhD,EAAYiD,EAqFN,OArFNjD,GAqF8B,UAAAyB,EAAKgB,iBAAL,eAAgBD,MAAO,GArFzCS,EAqF6CxB,EAAKe,SApFrFU,IAAgBC,gBAAgBnD,GAAIoD,MAAK,WACrClD,EAAaI,gBAAgB2C,GAAgB,GAC7CrB,GAAmB,QAoFH,qBAAGC,UAAU,iCAGjB,0BACIA,UAAU,wBACVmB,QAAS,iBAtFNhD,EAAYiD,EAsFN,OAtFNjD,GAsF8B,UAAAyB,EAAKgB,iBAAL,eAAgBD,MAAO,GAtFzCS,EAsF6CxB,EAAKe,SArFrFU,IAAgBG,gBAAgBrD,GAAIoD,MAAK,WACrClD,EAAaI,gBAAgB2C,GAAgB,GAC7CrB,GAAmB,QAqFH,qBAAGC,UAAU,kCAIE,qBAA1BJ,EAAKU,kBAA4CR,EAU9C,KATA,uBAAKE,UAAU,8BACX,0BAAQA,UAAU,8BAA8BmB,QAvF3C,WACrBN,IAAMY,iBAAiB7B,EAAKiB,OAAOU,MAAK,WACpClD,EAAaI,gBAAgBmB,EAAKiB,OAAS,IAC3Cd,GAAmB,QAqFH,qBAAGC,UAAU,iCAGjB,0BAAQA,UAAU,wBAAwBmB,QApFrC,WACrBN,IAAMa,iBAAiB9B,EAAKiB,OAAOU,MAAK,WACpClD,EAAaI,gBAAgBmB,EAAKiB,OAAS,IAC3Cd,GAAmB,QAkFH,qBAAGC,UAAU,mCAK7B,6BCzLN2B,EAA+C,SAAC,GAE/C,IAAD,IADFC,qBACE,MADc,GACd,EACF,OACI,oCACKA,EAAcC,KAAI,SAAAjC,GAAI,OACnB,kBAAC,EAAD,CAAkBkC,IAAKlC,EAAKe,IAAKtC,aAAcuB,SAMhDmC,EAzBiD,SAAC,GAG1D,IAFHH,EAEE,EAFFA,cAEE,EADFI,QAEA,OACI,yBAAKhC,UAAU,kBACX,yBAAKA,UAAU,4BACX,kBAAC,EAAD,CAAmB4B,cAAeA,OCNnCK,EAV4C,WACvD,OACI,yBAAKjC,UAAU,aACX,yBAAKA,UAAU,gFACX,0BAAMA,UAAU,QAAhB,oB,gBCCHkC,EAAuC,IAAIC,YAAYC,KAgCrDC,UA9BO,WAAO,IAAD,EACkBnF,mBAA0B,IAD5C,mBACjB0E,EADiB,KACFU,EADE,OAEMpF,oBAAS,GAFf,mBAEjBqF,EAFiB,KAERC,EAFQ,KAGjBrF,EAAQH,cAARG,KAHiB,EAIMD,oBAAS,GAJf,mBAIjB8E,EAJiB,KAIRS,EAJQ,KAsBxB,OAfA3E,qBAAU,WACNO,EAAaC,MAAMnB,GAAMoE,MAAK,SAAAmB,GAC1BJ,EAAiB,GAAD,mBAAKV,GAAL,YAAuBc,EAASC,KAAKA,KAAKC,QAC1D,IAAM3C,EAAUyC,EAASC,KAAKA,KAAKC,KAAyBC,OAAM,SAAAjD,GAAI,OAAIA,EAAKK,UAC/EwC,GAAW,GACXD,EAAWvC,QAEhB,CAAC9C,IAEJW,qBAAU,WACDyE,GACD9E,SAASqF,cAAcZ,KAE5B,CAACK,IAGA,kBAACQ,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAqBnB,cAAeA,EAAeI,QAASA","file":"static/js/32.71e9f461.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\"\n\nlet timeOut: null | NodeJS.Timeout = null\n\nconst useInfiniteScroll = (currentPage = 1) => {\n    const [page, setPage] = useState<number>(currentPage)\n\n    const pageIncreamentOnScroll = () => {\n        if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100 && timeOut === null) {\n            timeOut = setTimeout(() => {\n                setPage(prevValue => prevValue + 1)\n                timeOut = null\n            }, 2000)\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener(\"scroll\", pageIncreamentOnScroll)\n        return () => document.removeEventListener(\"scroll\", pageIncreamentOnScroll)\n        // eslint-disable-next-line\n    }, [page])\n\n    return { page }\n}\n\nexport default useInfiniteScroll\n","const parseNotificationLink = (link: string, id: string): string => {\n    return link.replace(\"{{id}}\", id || \"\")\n}\n\nexport default parseNotificationLink\n","import axiosService from \"../../axiosService\"\n\nconst notification = {\n    fetch: (page: number = 1) => axiosService.get(\"Notification/get?page=\"+page),\n    actionPerformed: (id: string, actionPerformed: boolean = false) => axiosService.put(`Notification/read?ID=${id}`, {\n        \n        actionPerformed: actionPerformed\n        \n    }),\n    read: (id: string) => axiosService.put(`Notification/read?ID=${id}`),\n}\n\nexport default notification\n","import * as React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nimport relativeDate from \"../../../../Helpers/Date/relativeDate\"\nimport CommunitiesList from \"../../../../Helpers/Request/Services/Communities/Communities\"\nimport { CommentIcon } from \"../../../../Shared/Images/Images\"\nimport { INotification } from \"../../../../Models/User/Notification\"\nimport event from \"../../../../Helpers/Request/Services/Event/Event\"\nimport parseNotificationLink from \"../../../../Helpers/Functions/parseNotificationLink\"\nimport notification from \"../../../../Helpers/Request/Services/Notification/Notification\"\n\n// import parseUrl from '../../../../Helpers/Functions/parseNotificationUrl'\nexport interface NotificationItemProps {\n    notification: INotification\n}\n\nconst notificationnHeadings: { [key: string]: any } = {\n    isAward: {\n        heading: \"Award Received\",\n        type: \"award\",\n        link: \"/profile/settings/\",\n    },\n    isNewPost: {\n        heading: \"New Post\",\n        type: \"post\",\n        id: \"post\",\n        link: \"/post/details/{{id}}\",\n    },\n    isPostLiked: {\n        heading: \"Post Liked\",\n        type: \"post\",\n        id: \"post\",\n        link: \"/post/details/{{id}}\",\n    },\n    isPostDisLiked: {\n        heading: \"Post Disliked\",\n        id: \"post\",\n        type: \"post\",\n        link: \"/post/details/{{id}}\",\n    },\n    isInvitation: {\n        heading: \"Invitation\",\n        type: \"community\",\n        id: \"community\",\n        link: \"/\",\n    },\n    isInvitationResponse: {\n        heading: \"Invitation Response\",\n        type: \"community\",\n        id: \"community\",\n        link: \"/\",\n    },\n    isNewJoined: {\n        heading: \"New Joined\",\n        type: \"community\",\n        id: \"community\",\n        link: \"/community/details/{{id}}\",\n    },\n    isJoinedPending: {\n        heading: \"Joined Pending\",\n        type: \"community\",\n        id: \"community\",\n        link: \"/community/details/{{id}}\",\n    },\n    isJoiningResponse: {\n        heading: \"Joining Response\",\n        type: \"community\",\n        id: \"community\",\n        link: \"/community/details/{{id}}\",\n    },\n    isPostComment: {\n        heading: \"Post Comment\",\n        id: \"post\",\n        type: \"post\",\n        link: \"/post/details/{{id}}\",\n    },\n    \"Event Invitation\": {\n        heading: \"Event Invitation\",\n        type: \"event\",\n        id: \"event\",\n        link: \"/event/details/{{id}}\",\n    },\n    isPostApproved: {\n        heading: \"Post Approved\",\n        type: \"post\",\n        id: \"post\",\n        link: \"/post/details/{{id}}\",\n    },\n    AwardReceived: {\n        heading: \"Award Received\",\n        type: \"award\",\n        link: \"/profile/stats/\",\n    }\n\n}\n\nconst NotificationItem: React.FC<NotificationItemProps> = ({ notification: item }) => {\n    const [actionsComplete, setActionsComplete] = React.useState(!!item.actionPerformed)\n\n\n\n    const acceptInvititaion = (id: string, notificationID: string) => {\n        CommunitiesList.acceptCommunity(id).then(() => {\n            notification.actionPerformed(notificationID, true)\n            setActionsComplete(true)\n        })\n    }\n    const rejectInvititaion = (id: string, notificationID: string) => {\n        CommunitiesList.rejectCommunity(id).then(() => {\n            notification.actionPerformed(notificationID, true)\n            setActionsComplete(true)\n        })\n    }\n\n    const acceptRequestMod = () => {\n        event.acceptModRequest(item.event).then(() => {\n            notification.actionPerformed(item.event || \"\")\n            setActionsComplete(true)\n        })\n    }\n\n    const rejectRequestMod = () => {\n        event.rejectModRequest(item.event).then(() => {\n            notification.actionPerformed(item.event || \"\")\n            setActionsComplete(true)\n        })\n    }\n\n    const getNotificationId = (): string => {\n        switch (item.notificationType) {\n            case \"isPostComment\":\n            case \"isNewPost\":\n            case \"isPostLiked\":\n            case \"isPostDisLiked\":\n            case \"isPostApproved\":\n                return item.post?._id || \"\";\n            case \"isInvitation\":\n            case \"isInvitationResponse\":\n            case \"isNewJoined\":\n            case \"isJoinedPending\":\n            case \"isJoiningResponse\":\n                return item.community?._id || \"\"\n            case \"Event Invitation\":\n                return item.event || \"\"\n            default:\n                return \"\"\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className={`profile-container notification--item ${item.isRead ? \"done\" : \"\"}`}>\n                <div className=\"pb-1 d-flex flex-lg-row flex-column justify-content-between mb-2\">\n                    <div className=\"d-flex flex-lg-row flex-column\">\n                        <div>\n                            <span className=\"comment-image\">\n                                <img src={CommentIcon} width=\"20\" alt=\"comment\" />\n                            </span>\n                            <span className=\"post-in ml-1\">\n                                {notificationnHeadings[item.notificationType]?.heading || \"\"}\n                            </span>\n                        </div>\n                    </div>\n                    <div>\n                        <span className=\"post-in\">{relativeDate(item.updatedAt)}</span>\n                    </div>\n                </div>\n                <Link\n                    to={parseNotificationLink(\n                        notificationnHeadings[item.notificationType]?.link || \"\",\n                        getNotificationId()\n                    )}\n                >\n                    {item.person && item.community ? (\n                        <div className=\"pb-1 d-flex\">\n                            <span className=\"text-prime\">{item?.person.userName}</span>\n                            <span className=\"post-in ml-1\">in</span>\n                            <span className=\"text-prime ml-1\">{item?.community.name}</span>\n                        </div>\n                    ) : null}\n                    <p className=\"post-in mb-0 font-weight-bold\">{item.message}</p>\n                </Link>\n                {item.notificationType === \"isInvitation\" && !actionsComplete ? (\n                    <div className=\"d-flex justify-content-end\">\n                        <button\n                            className=\"btn btn-sm btn-success mr-2\"\n                            onClick={() => acceptInvititaion(item.community?._id || \"\", item._id)}\n                        >\n                            <i className=\"fa mr-0 fa-check text-white\"></i>\n                        </button>\n\n                        <button\n                            className=\"btn btn-sm btn-danger\"\n                            onClick={() => rejectInvititaion(item.community?._id || \"\", item._id)}\n                        >\n                            <i className=\"fa mr-0 fa-times text-white\" />\n                        </button>\n                    </div>\n                ) : null}\n                {item.notificationType === \"Event Invitation\" && !actionsComplete ? (\n                    <div className=\"d-flex justify-content-end\">\n                        <button className=\"btn btn-sm btn-success mr-2\" onClick={acceptRequestMod}>\n                            <i className=\"fa mr-0 fa-check text-white\" />\n                        </button>\n\n                        <button className=\"btn btn-sm btn-danger\" onClick={rejectRequestMod}>\n                            <i className=\"fa mr-0 fa-times text-white\" />\n                        </button>\n                    </div>\n                ) : null}\n            </div>\n            <hr />\n        </React.Fragment>\n    )\n}\n\nexport default NotificationItem\n","import React, { FC } from \"react\"\n\nimport NotificationInterface from \"../../../../Interface/Notifications/NotificationInterface\"\nimport { INotification } from \"../../../../Models/User/Notification\"\nimport NotificationItem from \"./NotificationItem\"\n\nexport interface NotificationContentProps {\n    notifications: INotification[],\n    loading: Boolean\n}\n\n\n\nconst NotificationContent: React.FC<NotificationContentProps> = ({\n    notifications,\n    loading\n}) => {\n    return (\n        <div className=\"mc-border mt-3\">\n            <div className=\"notification-description\">\n                <NotificationItems notifications={notifications} />\n            </div>\n        </div>\n    )\n}\n\nconst NotificationItems: FC<NotificationInterface> = ({\n    notifications = [],\n}) => {\n    return (\n        <>\n            {notifications.map(item => (\n                <NotificationItem key={item._id} notification={item} />\n            ))}\n        </>\n    )\n}\n\nexport default NotificationContent\n","import React from \"react\"\n\ninterface NotificationBarProps {}\n\nconst NotificationTopBar: React.FC<NotificationBarProps> = () => {\n    return (\n        <div className=\"cp-header\">\n            <div className=\"d-flex flex-lg-row flex-column justify-content-between align-items-lg-center\">\n                <span className=\"head\">Notifications</span>\n            </div>\n        </div>\n    )\n}\n\nexport default NotificationTopBar\n","import React, { useEffect, useState } from \"react\"\nimport Profile from \"..\"\nimport NotificationContent from \"./Components/Notifications\"\nimport NotificationTopBar from \"./Components/NotificationTopBar\"\nimport notification from \"../../../Helpers/Request/Services/Notification/Notification\"\nimport { INotification } from \"../../../Models/User/Notification\"\nimport { NOTIFICATION_RECEIVED_EVENT } from \"../../../Constants/constants\"\n// import useInfiniteScroll from \"../../../../Hooks/useInfiniteScroll\"\nimport useInfiniteScroll from \"../../../Hooks/useInfiniteScroll\";\nexport const NOTIFICATION_RECEIVED_EVENT_DISPATCH = new CustomEvent(NOTIFICATION_RECEIVED_EVENT)\n\nconst Notifications = () => {\n    const [notifications, setNotifications] = useState<INotification[]>([])\n    const [allRead, setAllRead] = useState(true)\n    const {page} = useInfiniteScroll();\n    const [loading, setLoading] = useState(true);\n\n\n    useEffect(() => {\n        notification.fetch(page).then(response => {\n            setNotifications([...notifications, ...response.data.data.docs])\n            const isRead = (response.data.data.docs as INotification[]).every(item => item.isRead)\n            setLoading(false);\n            setAllRead(isRead)\n        })\n    }, [page])\n\n    useEffect(() => {\n        if (!allRead) {\n            document.dispatchEvent(NOTIFICATION_RECEIVED_EVENT_DISPATCH)\n        }\n    }, [allRead])\n\n    return (\n        <Profile>\n            <NotificationTopBar />\n            <NotificationContent notifications={notifications} loading={loading}/>\n        </Profile>\n    )\n}\n\nexport default Notifications\n"],"sourceRoot":""}