{"version":3,"sources":["Controller/Home/Announcement/newDesign/Index.tsx","Helpers/Functions/isSameDay.ts","Views/Calender/Components/ListView/Items/ListViewItems.tsx","Views/Calender/Components/GridView/CalenderComponent.tsx","Helpers/Functions/parseEventForCalender.ts","Views/Calender/Components/CalenderView.tsx"],"names":["Announcement","event","link","useState","going","isGoing","setisGoing","className","onMarkGoing","dayjs","extend","isBetween","isSameDay","start","end","format","isBetweenDay","date","isAfterDay","isAfter","ListViewItems","events","map","item","idx","key","CalenderComponent","options","calendarRef","calendarUpdate","React","viewTitle","setviewTitle","useEffect","calendarApi","current","getApi","viewtitle","getDate","currentDataManager","data","split","JSON","stringify","month","ref","showNonCurrentDates","buttonText","defaultOptions","defaultButtonText","header","themeSystem","initialView","plugins","interactionPlugin","listPlugin","dayGridPlugin","bootStrap","eventClick","jsEvent","preventDefault","Notification","title","dayMaxEventRows","eventContent","info","data-tip","_def","Number","extendedProps","myDuration","style","width","overflow","target","href","url","multiline","eventClassNames","toDuration","startDate","Date","endDate","diff","Math","abs","getTime","floor","parseEventForCalender","id","_id","hostedBy","eventName","fromatToDate","d","getFullYear","getMonth","CalendarView","selectedEvent","setEvent","selectedDate","setSelected","onDateClick","console","log","evs","filter","scrollTo","window","scrollY","scroll","e","find","eve","publicId","dateClick","delayHide","delayShow","position","fontSize","opacity","left","type","onChange","value","name","defaultValue","length"],"mappings":"uIA6BeA,IAnBwB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAAW,EACtBC,mBAASF,GADa,gCAE1BE,mBAASF,EAAMG,QAFW,mBAEjDC,EAFiD,KAExCC,EAFwC,KAGxD,OACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,mBACVN,GACG,kBAAC,IAAD,CACIA,MAAOA,EACPG,MAAOC,EACPG,YAAa,SAACJ,GAAD,OAAgBE,EAAWF,IACxCF,KAAMA,Q,iCCrB9B,6IAGAO,IAAMC,OAAOC,KAEN,IAAMC,EAAY,SAACC,EAAsBC,GAI5C,OAHkBL,IAAMI,GAAOE,OAAO,gBACtBN,IAAMK,GAAKC,OAAO,eAKzBC,EAAe,SAACH,EAAsBC,EAAoBG,GACnE,OAAOR,IAAMQ,GAAMN,UAAUE,EAAOC,IAG3BI,EAAa,SAACL,EAAsBC,GAC7C,OAAOL,IAAMI,GAAOM,QAAQL,K,iCCjBhC,6BAeeM,IAV4B,SAAC,GAAmC,IAAD,IAAhCC,cAAgC,MAAvB,GAAuB,EAC1E,OACI,yBAAKd,UAAU,yBACVc,EAAOC,KAAI,SAACC,EAAMC,GAAP,OACR,kBAAC,IAAD,CAAcvB,MAAOsB,EAAME,IAAKD,U,uVC0EjCE,EA9DwC,SAAC,GAA0D,EAAxDL,OAAyD,IAA5CM,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eAAqB,EAC5EC,IAAM3B,SAAc,IADwD,mBACvG4B,EADuG,KAC5FC,EAD4F,KAG9GF,IAAMG,WAAU,WACZ,IAAIC,EAAcN,EAAYO,QAAQC,SAElCC,GADOH,EAAYI,UACPJ,EAAYK,mBAAmBC,KAAKT,UAAUU,MAAM,MAChEC,KAAKC,UAAUN,KAAeK,KAAKC,UAAUZ,IAC7CC,EAAaK,KAElB,CAACR,IAEJ,IAZ8G,cAoChFE,EApCgF,UAoCzGa,OApCyG,MAoCjG,GApCiG,SAoC7F3B,OApC6F,MAoCtF,GApCsF,EAsC9G,OACI,oCACI,yBAAKV,UAAU,yBACX,8BAAOqC,GACP,8BAAO3B,IAEX,kBAAC,IAAD,eACI4B,IAAKjB,EACLkB,qBAAqB,EACrBC,WAAYC,EAAeC,kBAC3BC,QAAQ,EACRC,YAAa,YACbC,YAAaJ,EAAeI,YAC5BC,QAAS,CAACC,IAAmBC,IAAYC,IAAeC,KACxDC,WAxCS,SAAC,GAA6B,IAA3BzD,EAA0B,EAA1BA,MAA0B,EAAnB0D,QACnBC,iBACRC,YAAa5D,EAAM6D,MAAO,SAuClBC,gBAAiB,EACjBC,aArCU,SAACC,GACnB,OACI,oCACI,0BACIC,WAAA,UAAaD,EAAKhE,MAAMkE,KAAKL,MAA7B,4BACIM,OAAOH,EAAKhE,MAAMkE,KAAKE,cAAcC,aAAe,EADxD,SAGA/D,UAAU,sBACVgE,MAAO,CAAEC,MAAO,OAAQC,SAAU,WAElC,uBAAGC,OAAO,QAAQC,KAAMV,EAAKhE,MAAMkE,KAAKS,KACnCX,EAAKhE,MAAMkE,KAAKE,cAAcC,WADnC,IACgDL,EAAKhE,MAAMkE,KAAKL,QAGpE,kBAAC,IAAD,CAAce,WAAW,MAwBzBC,gBAAgB,eACZnD,M,SC1EdoD,EAAa,SAAClE,EAAaC,GAC7B,IAAIkE,EAAY,IAAIC,KAAKpE,GACrBqE,EAAU,IAAID,KAAKnE,GACnBqE,EAAOC,KAAKC,IAAIH,EAAQI,UAAYN,EAAUM,WAGlD,OADWF,KAAKG,MAAMJ,EADb,OAC0B,EACrB,IAYHK,EAVe,SAACnE,GAC3B,OAAOA,EAAOC,KAAI,SAAArB,GAAK,MAAK,CACxBwF,GAAIxF,EAAMyF,IACV5B,MAAM,GAAD,OAAK7D,EAAM0F,SAAX,cAAyB1F,EAAM2F,WACpC/E,MAAOZ,EAAMgB,KAAK+D,UAClBV,WAAYS,EAAW9E,EAAMgB,KAAK+D,UAAW/E,EAAMgB,KAAKiE,SACxDN,IAAK,kBAAoB3E,EAAMyF,S,SCNjCG,EAAe,SAAC5E,GAClB,IAAI6E,EAAI,IAAIb,KAAKhE,GACjB,MAAM,GAAN,OAAU6E,EAAEC,cAAZ,YAA6BD,EAAEE,WAAa,EAA5C,YAAiDF,EAAExD,YA+GxC2D,UAtGmC,SAAC,GAA6C,IAA3C5E,EAA0C,EAA1CA,OAAQO,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eAAqB,EACzDC,WAAyB,IADgC,mBACpFoE,EADoF,KACrEC,EADqE,OAEvDrE,WAAe,IAAImD,MAFoC,mBAEpFmB,EAFoF,KAEtEC,EAFsE,KAgBrFC,EAAc,SAAC9D,GACjB6D,EAAY7D,EAAKvB,MACjBsF,QAAQC,IAAI,2BACZD,QAAQC,IAAIhE,GACZ+D,QAAQC,IAAI,2BACZ,IAAMC,EAAMpF,EAAOqF,QACf,SAAAzG,GAAK,OACDW,YAAUX,EAAMgB,KAAK+D,UAAWxC,EAAKvB,OACrCL,YAAUX,EAAMgB,KAAKiE,QAAS1C,EAAKvB,OACnCD,YAAaf,EAAMgB,KAAK+D,UAAW/E,EAAMgB,KAAKiE,QAAS1C,EAAKvB,SAEpEsF,QAAQC,IAAI,gCACZD,QAAQC,IAAIC,GACZF,QAAQC,IAAI,gCACZL,EAAS,YAAIM,IA1BF,WACX,IACIE,EADUC,OAAOC,QACI,IACzBD,OAAOD,SAAS,EAAGA,GAwBnBG,IAGJhF,aAAgB,WACZwE,EAAY,CAAErF,KAAMmF,MAErB,CAAC/E,IAcJ,OACI,gBAAC,WAAD,KACI,uBAAKd,UAAU,kBACX,gBAAC,EAAD,CACIqB,YAAaA,EACbC,eAAgBA,EAChBF,QAAS,CACLN,OAAQmE,EAAsBnE,GAC9BqC,WAjDC,SAAC,GAA0E,IAAxEzD,EAAuE,EAAvEA,MACpBsG,QAAQC,IAAIvG,GACZ,IAAM8G,EAAS1F,EAAO2F,MAAK,SAAAC,GAAG,OAAIA,EAAIvB,MAAQzF,EAAMkE,KAAK+C,YACrDH,GAAGZ,EAASY,IA+CAI,UAAWb,MAItBJ,EACG,gBAAC,WAAD,KACI,gBAAC,IAAD,CAAcrB,WAAW,EAAMuC,UAAW,IAAKC,UAAW,MAC1D,uBAAK9G,UAAU,aACX,qBACIA,UAAU,uBACV2D,WAAS,8DAFb,UAKI,wBAAM3D,UAAW,2BAAjB,MAEI,wBAAMA,UAAW,OAAQgE,MAAO,CAAE+C,SAAU,WAAYC,SAAU,SAC7D1B,EAAaO,GAAe,IAC7B,yBACI7B,MAAO,CAAEiD,QAAS,EAAGF,SAAU,WAAYG,KAAM,GACjDC,KAAK,OACLjC,GAAG,QACHkC,SA1Cf,SAACZ,GAClBV,EAAYU,EAAErC,OAAOkD,OACrB,IAAIpF,EAAO,CAAEvB,KAAM,IAAIgE,KAAK8B,EAAErC,OAAOkD,QAC/BnB,EAAMpF,EAAOqF,QACf,SAAAzG,GAAK,OACDW,YAAUX,EAAMgB,KAAK+D,UAAWxC,EAAKvB,OACrCL,YAAUX,EAAMgB,KAAKiE,QAAS1C,EAAKvB,OACnCD,YAAaf,EAAMgB,KAAK+D,UAAW/E,EAAMgB,KAAKiE,QAAS1C,EAAKvB,SAEpEkF,EAAS,YAAIM,KAkCmBoB,KAAK,QACLD,MAAOxB,EAAe,GACtB0B,aAAcjC,EAAaO,SAMrB,IAAzBF,EAAc6B,OACX,qBAAGxH,UAAU,oBAAb,+BAEA,gBAACa,EAAA,EAAD,CAAeC,OAAQ6E,KAG/B","file":"static/js/11.79c1ebcc.chunk.js","sourcesContent":["import React, { FC, useState } from \"react\"\n\nimport IEvent from \"../../../../Models/User/IEvent\"\nimport EventBody from \"./EventBody\"\n\nexport interface Announcement {\n    event: IEvent\n    link?: string\n}\n\nconst Announcement: FC<Announcement> = ({ event, link }) => {\n    const [eventItem, seteventItem] = useState(event)\n    const [isGoing, setisGoing] = useState(event.going)\n    return (\n        <div className=\"event-card-container pt-3\">\n            <div className=\"event-card-wrap\">\n                {event && (\n                    <EventBody\n                        event={event}\n                        going={isGoing}\n                        onMarkGoing={(going: any) => setisGoing(going)}\n                        link={link}\n                    />\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default Announcement\n","import dayjs from \"dayjs\"\nimport isBetween from \"dayjs/plugin/isBetween\"\n\ndayjs.extend(isBetween)\n\nexport const isSameDay = (start: Date | string, end: Date | string) => {\n    const startDate = dayjs(start).format(\"YYYY-MM-DD\")\n    const endDate = dayjs(end).format(\"YYYY-MM-DD\")\n\n    return startDate === endDate\n}\n\nexport const isBetweenDay = (start: Date | string, end: Date | string, date: Date) => {\n    return dayjs(date).isBetween(start, end)\n}\n\nexport const isAfterDay = (start: Date | string, end: Date | string) => {\n    return dayjs(start).isAfter(end)\n}\n","import React, { FC, ReactElement } from \"react\"\n\nimport Announcement from \"../../../../../Controller/Home/Announcement/newDesign/Index\"\nimport EventsInterface from \"../../../../../Interface/Events/EventsInterface\"\n\nconst ListViewItems: FC<EventsInterface> = ({ events = [] }): ReactElement => {\n    return (\n        <div className=\"event-cards-container\">\n            {events.map((item, idx) => (\n                <Announcement event={item} key={idx} />\n            ))}\n        </div>\n    )\n}\n\nexport default ListViewItems\n","import React from \"react\"\n\nimport FullCalendar from \"@fullcalendar/react\"\nimport ReactTooltip from \"react-tooltip\"\nimport interactionPlugin from \"@fullcalendar/interaction\"\nimport bootStrap from \"@fullcalendar/bootstrap\"\nimport dayGridPlugin from \"@fullcalendar/daygrid\"\nimport listPlugin from \"@fullcalendar/list\"\n\nimport defaultOptions from \"../../../../Configs/FullCalender.json\"\nimport Notification from \"../../../../Shared/Notification/Notification\"\n// import { OptionsInput } from \"@fullcalendar/core\"\nimport dayjs from \"dayjs\"\n\ntype CalenderComponent = {\n    events?: any[]\n    options?: any\n    calendarRef: any\n    calendarUpdate: number\n}\n\nconst CalenderComponent: React.FC<CalenderComponent> = ({ events = [], options, calendarRef, calendarUpdate }) => {\n    const [viewTitle, setviewTitle] = React.useState<any>([])\n\n    React.useEffect(() => {\n        let calendarApi = calendarRef.current.getApi()\n        let date = calendarApi.getDate()\n        let viewtitle = calendarApi.currentDataManager.data.viewTitle.split(\" \")\n        if (JSON.stringify(viewtitle) !== JSON.stringify(viewTitle)) {\n            setviewTitle(viewtitle)\n        }\n    }, [calendarUpdate])\n\n    const onEventClick = ({ event, jsEvent }: any) => {\n        jsEvent.preventDefault()\n        Notification(event.title, \"info\")\n    }\n\n    const renderContent = (info: any) => {\n        return (\n            <>\n                <span\n                    data-tip={`${info.event._def.title} <br />duration: ${\n                        Number(info.event._def.extendedProps.myDuration) || 1\n                    } days`}\n                    className=\"badge badge-primary\"\n                    style={{ width: \"100%\", overflow: \"hidden\" }}\n                >\n                    <a target=\"blank\" href={info.event._def.url}>\n                        {info.event._def.extendedProps.myDuration}-{info.event._def.title}\n                    </a>\n                </span>\n                <ReactTooltip multiline={true} />\n            </>\n        )\n    }\n\n    let [month = \"\", date = \"\"] = viewTitle\n\n    return (\n        <>\n            <div className=\"calendar__title_dates\">\n                <span>{month}</span>\n                <span>{date}</span>\n            </div>\n            <FullCalendar\n                ref={calendarRef}\n                showNonCurrentDates={false}\n                buttonText={defaultOptions.defaultButtonText}\n                header={false}\n                themeSystem={\"bootstrap\"}\n                initialView={defaultOptions.initialView}\n                plugins={[interactionPlugin, listPlugin, dayGridPlugin, bootStrap]}\n                eventClick={onEventClick}\n                dayMaxEventRows={2}\n                eventContent={renderContent}\n                eventClassNames=\"event--item\"\n                {...options}\n            />\n        </>\n    )\n}\n\nexport default CalenderComponent\n","import { EventInput } from \"@fullcalendar/core\"\nimport IEvent from \"../../Models/User/IEvent\"\n\nconst toDuration = (start: Date, end: Date) => {\n    let startDate = new Date(start)\n    let endDate = new Date(end)\n    let diff = Math.abs(endDate.getTime() - startDate.getTime())\n    let cd = 24 * 60 * 60 * 1000\n    let days = Math.floor(diff / cd) + 1\n    return days + \"\"\n}\nconst parseEventForCalender = (events: IEvent[]): EventInput[] => {\n    return events.map(event => ({\n        id: event._id,\n        title: `${event.hostedBy} - ${event.eventName}`,\n        start: event.date.startDate,\n        myDuration: toDuration(event.date.startDate, event.date.endDate),\n        url: \"/event/details/\" + event._id,\n    }))\n}\n\nexport default parseEventForCalender\n","import * as React from \"react\"\nimport { EventApi } from \"@fullcalendar/core\"\nimport ReactTooltip from \"react-tooltip\"\nimport CalenderComponent from \"./GridView/CalenderComponent\"\nimport ListViewItems from \"./ListView/Items/ListViewItems\"\nimport IEvent from \"../../../Models/User/IEvent\"\nimport parseEventForCalender from \"../../../Helpers/Functions/parseEventForCalender\"\nimport { isSameDay, isBetweenDay } from \"../../../Helpers/Functions/isSameDay\"\nimport dayjs from \"dayjs\"\nimport { formattedTime } from \"../../../Helpers/Date/formattedTime\"\nimport { CURRENT_AD_INDEX } from \"../../../Context/actions\"\nconst fromatToDate = (date: Date | any) => {\n    let d = new Date(date)\n    return `${d.getFullYear()}/${d.getMonth() + 1}/${d.getDate()}`\n}\n\nexport interface CalendarViewProps {\n    events: IEvent[]\n    calendarRef: any\n    calendarUpdate: number\n}\n\nconst CalendarView: React.FC<CalendarViewProps> = ({ events, calendarRef, calendarUpdate }) => {\n    const [selectedEvent, setEvent] = React.useState<IEvent[]>([])\n    const [selectedDate, setSelected] = React.useState(new Date())\n\n    const scroll = () => {\n        let wScroll = window.scrollY\n        let scrollTo = wScroll + 190 // comRef.current.offsetTop;\n        window.scrollTo(0, scrollTo)\n    }\n\n    const onEventClick = ({ event }: { el: HTMLElement; event: EventApi; jsEvent: MouseEvent }) => {\n        console.log(event)\n        const e: any = events.find(eve => eve._id === event._def.publicId)\n        if (e) setEvent(e)\n    }\n\n    const onDateClick = (data: { date: Date }) => {\n        setSelected(data.date)\n        console.log(\"--- On Date Clicked ---\")\n        console.log(data)\n        console.log(\"--- On Date Clicked ---\")\n        const evs = events.filter(\n            event =>\n                isSameDay(event.date.startDate, data.date) ||\n                isSameDay(event.date.endDate, data.date) ||\n                isBetweenDay(event.date.startDate, event.date.endDate, data.date)\n        )\n        console.log(\" --- filtered events -------\")\n        console.log(evs)\n        console.log(\" --- filtered events -------\")\n        setEvent([...evs])\n        scroll()\n    }\n\n    React.useEffect(() => {\n        onDateClick({ date: selectedDate })\n        // eslint-disable-next-line\n    }, [events])\n\n    const onDateChange = (e: any) => {\n        setSelected(e.target.value)\n        let data = { date: new Date(e.target.value) }\n        const evs = events.filter(\n            event =>\n                isSameDay(event.date.startDate, data.date) ||\n                isSameDay(event.date.endDate, data.date) ||\n                isBetweenDay(event.date.startDate, event.date.endDate, data.date)\n        )\n        setEvent([...evs])\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"calender__view\">\n                <CalenderComponent\n                    calendarRef={calendarRef}\n                    calendarUpdate={calendarUpdate}\n                    options={{\n                        events: parseEventForCalender(events),\n                        eventClick: onEventClick,\n                        dateClick: onDateClick,\n                    }}\n                />\n            </div>\n            {selectedEvent ? (\n                <React.Fragment>\n                    <ReactTooltip multiline={true} delayHide={200} delayShow={200} />\n                    <div className=\"mt-5 py-1\">\n                        <p\n                            className=\"event__list-title h3\"\n                            data-tip=\"Click on date in the Calender display events closest to it\"\n                        >\n                            Results\n                            <span className={\"ml-1 font-weight-normal\"}>\n                                for\n                                <span className={\"ml-1\"} style={{ position: \"relative\", fontSize: \"18px\" }}>\n                                    {fromatToDate(selectedDate)}{\" \"}\n                                    <input\n                                        style={{ opacity: 0, position: \"absolute\", left: 0 }}\n                                        type=\"date\"\n                                        id=\"dater\"\n                                        onChange={onDateChange}\n                                        name=\"dater\"\n                                        value={selectedDate + \"\"}\n                                        defaultValue={fromatToDate(selectedDate)}\n                                    />\n                                </span>\n                            </span>\n                        </p>\n                    </div>\n                    {selectedEvent.length === 0 ? (\n                        <p className=\"mt-4 text-center\">No Events For Selected Date</p>\n                    ) : (\n                        <ListViewItems events={selectedEvent} />\n                    )}\n                </React.Fragment>\n            ) : null}\n            {/* <img src=\"https://paintingsmadebyme.com/wp-content/uploads/2015/08/Coming-Soon-PNG.png\" style ={{\"width\": \"100%\"}} alt=\"\"/> */}\n        </React.Fragment>\n    )\n}\n\nexport default CalendarView\n"],"sourceRoot":""}