{"version":3,"sources":["Hooks/useInfiniteScroll.ts","Views/Groups/Details/Components/Posts.tsx"],"names":["timeOut","useInfiniteScroll","currentPage","useState","page","setPage","pageIncreamentOnScroll","window","innerHeight","scrollY","document","body","offsetHeight","setTimeout","prevValue","useEffect","addEventListener","removeEventListener","GroupPosts","pageNo","sorting","id","useParams","posts","setPosts","loading","setLoading","awards","setAwards","_sorting","setsort","CommunitiesList","getCommunityPostsById","then","response","prevPosts","data","docs","deletePost","event","filteredPosts","filter","post","_id","detail","deleteEvent","pinPostToggled","pIndex","ps","map","item","index","isPined","pinned","pp","splice","POST_PIN_EVENT","DELETE_POST_EVENT","DELETE_EVENT_EVENT","axiosService","get","resp","topMargin"],"mappings":"qHAEIA,EAAiC,KAuBtBC,IArBW,WAAsB,IAArBC,EAAoB,uDAAN,EAAM,EACnBC,mBAAiBD,GADE,mBACpCE,EADoC,KAC9BC,EAD8B,KAGrCC,EAAyB,WACvBC,OAAOC,YAAcD,OAAOE,SAAWC,SAASC,KAAKC,aAAe,KAAmB,OAAZZ,IAC3EA,EAAUa,YAAW,WACjBR,GAAQ,SAAAS,GAAS,OAAIA,EAAY,KACjCd,EAAU,OACX,OAUX,OANAe,qBAAU,WAEN,OADAL,SAASM,iBAAiB,SAAUV,GAC7B,kBAAMI,SAASO,oBAAoB,SAAUX,MAErD,CAACF,IAEG,CAAEA,U,kICgEEc,UA5EmB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACjCC,EAAOC,cAAPD,GACAjB,EAASH,YAAkBkB,GAA3Bf,KAF+C,EAG7BD,mBAAsB,IAHO,mBAGhDoB,EAHgD,KAGzCC,EAHyC,OAIzBrB,oBAAS,GAJgB,mBAIhDsB,EAJgD,KAIvCC,EAJuC,OAK3BvB,mBAAS,IALkB,mBAKhDwB,EALgD,KAKxCC,EALwC,OAM3BzB,mBAASiB,GANkB,mBAMhDS,EANgD,KAMtCC,EANsC,KAQvDf,qBAAU,WACFc,IAAaT,IACbI,EAAS,IACTM,EAAQV,IAEZW,IAAgBC,sBAAsBX,EAAIjB,EAAMgB,GAASa,MAAK,SAAAC,GAC1DR,GAAW,GACXF,GAAS,SAAAW,GAAS,4BAAQA,GAAR,YAAsBD,EAASE,KAAKA,KAAKC,eAEhE,CAAChB,EAAIjB,EAAMgB,IAEd,IAAMkB,EAAa,SAACC,GAChB,IAAMC,EAAgBjB,EAAMkB,QAAO,SAAAC,GAAI,aAAI,UAAAA,EAAKA,YAAL,eAAWC,OAAQJ,EAAMK,OAAOvB,MAC3EG,EAASgB,IAGPK,EAAc,SAACN,GACjB,IAAMC,EAAgBjB,EAAMkB,QAAO,SAAAC,GAAI,aAAI,UAAAA,EAAKH,aAAL,eAAYI,OAAQJ,EAAMK,OAAOvB,MAC5EG,EAASgB,IAGPM,EAAiB,SAACP,GACpB,IAAIQ,GAAU,EACRC,EAAKzB,EAAM0B,KAAI,SAACC,EAAMC,GAAsB,IAAD,IAC7C,OAAID,EAAKR,OAAQ,UAAAQ,EAAKR,YAAL,eAAWC,OAAQJ,EAAMK,OAAOvB,IAC7C0B,EAASI,EACF,2BAAKD,GAAZ,IAAkBR,KAAK,2BAAMQ,EAAKR,MAAZ,IAAkBU,QAASb,EAAMK,OAAOS,aAGlE,UAAIH,EAAKR,YAAT,aAAI,EAAWU,SACJ,2BAAKF,GAAZ,IAAkBR,KAAK,2BAAMQ,EAAKR,MAAZ,IAAkBU,SAAS,MAG9CF,KAGPI,EAAkB,IACN,IAAZP,IACAO,EAAKN,EAAGO,OAAOR,EAAQ,IAG3BvB,EAAS,GAAD,mBAAK8B,GAAL,YAAYN,MAwBxB,OArBAjC,qBAAU,WAEN,OADAL,SAASM,iBAAiBwC,IAAgBV,GACnC,kBAAMpC,SAASM,iBAAiBwC,IAAgBV,MACxD,CAACA,IAEJ/B,qBAAU,WAEN,OADAL,SAASM,iBAAiByC,IAAmBnB,GACtC,kBAAM5B,SAASM,iBAAiByC,IAAmBnB,MAC3D,CAACA,EAAYf,IAEhBR,qBAAU,WAEN,OADAL,SAASM,iBAAiB0C,IAAoBb,GACvC,kBAAMnC,SAASM,iBAAiB0C,IAAoBb,MAC5D,CAACP,EAAYf,IAEhBR,qBAAU,WACN4C,IAAaC,IAAI,eAAe3B,MAAK,SAAA4B,GACjCjC,EAAUiC,EAAKzB,KAAKA,WAEzB,IAEI,kBAAC,IAAD,CAAeb,MAAOA,EAAOE,QAASA,EAASqC,WAAW,EAAOnC,OAAQA","file":"static/js/31.2d75ed9b.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\"\n\nlet timeOut: null | NodeJS.Timeout = null\n\nconst useInfiniteScroll = (currentPage = 1) => {\n    const [page, setPage] = useState<number>(currentPage)\n\n    const pageIncreamentOnScroll = () => {\n        if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100 && timeOut === null) {\n            timeOut = setTimeout(() => {\n                setPage(prevValue => prevValue + 1)\n                timeOut = null\n            }, 2000)\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener(\"scroll\", pageIncreamentOnScroll)\n        return () => document.removeEventListener(\"scroll\", pageIncreamentOnScroll)\n        // eslint-disable-next-line\n    }, [page])\n\n    return { page }\n}\n\nexport default useInfiniteScroll\n","import React, { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\n\nimport CommunitiesList from \"../../../../Helpers/Request/Services/Communities/Communities\"\nimport NewsFeedPosts from \"../../../Community/General/Component/NewsFeedPosts\"\nimport { INewsFeed } from \"../../../../Models/User/IEvent\"\nimport { DELETE_POST_EVENT, DELETE_EVENT_EVENT, POST_PIN_EVENT } from \"../../../../Constants/constants\"\nimport useInfiniteScroll from \"../../../../Hooks/useInfiniteScroll\"\nimport axiosService from \"../../../../Helpers/Request/axiosService\"\n\nconst GroupPosts: React.FC<any> = ({ pageNo, sorting }) => {\n    const { id } = useParams()\n    const { page } = useInfiniteScroll(pageNo)\n    const [posts, setPosts] = useState<INewsFeed[]>([])\n    const [loading, setLoading] = useState(true)\n    const [awards, setAwards] = useState([])\n    const [_sorting, setsort] = useState(sorting)\n\n    useEffect(() => {\n        if (_sorting !== sorting) {\n            setPosts([])\n            setsort(sorting)\n        }\n        CommunitiesList.getCommunityPostsById(id, page, sorting).then(response => {\n            setLoading(false)\n            setPosts(prevPosts => [...prevPosts, ...response.data.data.docs])\n        })\n    }, [id, page, sorting])\n\n    const deletePost = (event: any) => {\n        const filteredPosts = posts.filter(post => post.post?._id !== event.detail.id)\n        setPosts(filteredPosts)\n    }\n\n    const deleteEvent = (event: any) => {\n        const filteredPosts = posts.filter(post => post.event?._id !== event.detail.id)\n        setPosts(filteredPosts)\n    }\n\n    const pinPostToggled = (event: any) => {\n        let pIndex = -1\n        const ps = posts.map((item, index): INewsFeed => {\n            if (item.post && item.post?._id === event.detail.id) {\n                pIndex = index\n                return { ...item, post: { ...item.post, isPined: event.detail.pinned } }\n            }\n\n            if (item.post?.isPined) {\n                return { ...item, post: { ...item.post, isPined: false } }\n            }\n\n            return item\n        })\n\n        let pp: INewsFeed[] = []\n        if (pIndex !== -1) {\n            pp = ps.splice(pIndex, 1)\n        }\n\n        setPosts([...pp, ...ps])\n    }\n\n    useEffect(() => {\n        document.addEventListener(POST_PIN_EVENT, pinPostToggled)\n        return () => document.addEventListener(POST_PIN_EVENT, pinPostToggled)\n    }, [pinPostToggled])\n\n    useEffect(() => {\n        document.addEventListener(DELETE_POST_EVENT, deletePost)\n        return () => document.addEventListener(DELETE_POST_EVENT, deletePost)\n    }, [deletePost, posts])\n\n    useEffect(() => {\n        document.addEventListener(DELETE_EVENT_EVENT, deleteEvent)\n        return () => document.addEventListener(DELETE_EVENT_EVENT, deleteEvent)\n    }, [deletePost, posts])\n\n    useEffect(() => {\n        axiosService.get(\"/award/list\").then(resp => {\n            setAwards(resp.data.data)\n        })\n    }, [])\n\n    return <NewsFeedPosts posts={posts} loading={loading} topMargin={false} awards={awards} />\n}\n\nexport default GroupPosts\n"],"sourceRoot":""}