{"version":3,"sources":["Components/Form/FormTextArea.tsx","Helpers/Request/Services/uploadFile/FileUpload.ts","Shared/DateInput.tsx","Views/Event/Create/Component/EventCharacter.tsx","Helpers/Functions/isSameDay.ts","Shared/TimeInput.tsx","Helpers/Functions/reorder.ts","Views/Event/Create/Component/SubEvents/SubEventsList.tsx","Views/Event/Create/Component/SubEvents/index.tsx","Helpers/Functions/parseCharacter.ts","Views/Event/Create/Component/CreateEventForm.tsx","Views/Event/Create/Component/EventRules.tsx","Views/Event/Create/index.tsx"],"names":["FormTextArea","name","className","onBlur","onChange","props","id","label","labelClass","inputWrapperClass","defaultValue","isRequired","htmlFor","required","Post","uploadFile","data","axiosService","post","deleteFile","file","delete","CustomDateInput","value","onClick","type","icon","faCalendar","DateInput","options","selected","date","customInput","EventCharacteristics","onValueChange","characteristics","checked","handleChange","text","disabled","dayjs","extend","isBetween","isSameDay","start","end","format","isBetweenDay","isAfterDay","isAfter","CustomTimeInput","ref","faChevronDown","TimeInput","showPopperArrow","showTimeSelect","showTimeSelectOnly","timeIntervals","DatePickerConfig","dateFormat","timeCaption","reorder","list","startIndex","endIndex","splice","removed","SubEventsList","events","onSubEventsTimeChange","onSubEventsChange","deleteSubEvent","onDragEnd","droppableId","provided","droppableProps","innerRef","map","event","idx","index","key","_id","draggableId","provid","draggableProps","dragHandleProps","faTimes","FormInput","title","startTime","endTime","e","rows","placeholder","description","SubEvents","eventsData","React","subEvents","setSubEvents","counter","setCounter","forEach","item","result","destination","items","source","es","filter","_e","target","time","concat","length","toString","Date","faPlusCircle","parseCharacterics","characteristicsObject","i","replaceString","replace","setHours","notificationBefore","CreateEventForm","state","useLocation","useState","url","relatedLinks","setRelatedLinks","undefined","imagePreview","setImagePreview","link","contactRsvp","startDate","endDate","address","subEvent","isPublished","notifyUser","images","values","setValues","minTimeAllowed","maxTimeAllowed","dateInput","setDateInput","onDateChange","onTimeChange","onLinksChange","relatedClone","useEffect","city","country","coHostedBy","hostedBy","eventName","console","log","assetUrl","hour","getHours","toDate","FormHeader","showDrafts","Form","chars","Object","keys","char","push","processSubEvents","getFormData","isFormData","method","submitUrl","saveAsDraftUrl","afterSubmit","Notification","saveAsDraft","draftURL","redirectUrl","buttonText","preventDefault","faTimesCircle","src","alt","Fragment","PictureIcon","files","formData","FormData","append","mediaUploader","then","res","reader","FileReader","onload","readAsDataURL","wrapperClassName","placeholderText","minDate","minTime","maxTime","FormSelect","TimeZones","timezone","notif","EventCharacter","row","se","trim","EventRules","CreateEvent","asideRightContent"],"mappings":"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","file":"static/js/10.a72e91de.chunk.js","sourcesContent":["import React, { FC } from \"react\"\n\nimport { FormInputInterface } from \"../../Interface/Forms/FormInputInterface\"\n\nconst FormTextArea: FC<FormInputInterface> = ({\n    name,\n    className = \"form-control form-input2\",\n    onBlur,\n    onChange,\n    props,\n    id,\n    label,\n    labelClass = \"form-label\",\n    inputWrapperClass = \"form-group\",\n    defaultValue,\n    isRequired = false,\n}) => {\n    return (\n        <div className={`${inputWrapperClass} form__textarea-input`}>\n            {label ? (\n                <label htmlFor={name} className={labelClass}>\n                    {label}\n                </label>\n            ) : (\n                \"\"\n            )}\n            <textarea\n                name={name}\n                onBlur={onBlur}\n                id={id || name}\n                onChange={onChange}\n                className={className}\n                required={isRequired}\n                defaultValue={defaultValue}\n                {...props}\n            />\n        </div>\n    )\n}\n\nexport default FormTextArea\n","import axiosService from \"../../axiosService\"\n\nconst Post = {\n    uploadFile: (data: FormData) => axiosService.post(`media/upload`, data),\n    deleteFile: (file: string) => axiosService.delete(`media/upload`, {data: {file: file}})\n}\n\nexport default Post","import * as React from \"react\"\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nimport { faCalendar } from \"@fortawesome/free-regular-svg-icons\"\n\nexport interface DateInputProps {\n    name: string\n    value: Date | null | undefined\n    onChange?: (date: Date | null, name?: string) => void\n    options?: Partial<ReactDatePickerProps>\n}\n\nconst CustomDateInput = ({ value, onClick, onChange }: any) => (\n    <div className=\"custom__time-input\">\n        <input\n            type=\"text\"\n            className=\"form-control form-input2\"\n            onClick={onClick}\n            onChange={onChange}\n            value={value}\n        />\n        <FontAwesomeIcon className=\"icon\" icon={faCalendar as any} />\n    </div>\n)\n\nconst DateInput: React.FC<DateInputProps> = ({\n    name,\n    value,\n    onChange,\n    options,\n}) => {\n    return (\n        <DatePicker\n            selected={value}\n            className=\"form-control form-input2\"\n            onChange={date => onChange && onChange(date, name)}\n            customInput={<CustomDateInput />}\n            {...options}\n        />\n    )\n}\n\nexport default DateInput\n","import * as React from \"react\"\nimport FormCheckBox from \"../../../../Components/Form/FormCheckBox\"\n\nexport interface EventCharacteristicsProps {\n    onValueChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n    characteristics: {\n        [index: string]: boolean | string\n    }\n}\n\nconst EventCharacteristics: React.FC<EventCharacteristicsProps> = ({ onValueChange, characteristics }) => {\n    return (\n        <div className=\"event-chr-body mt-3 mb-3\">\n            <div className=\"row\">\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"openByApplication\"]}\n                        name=\"openByApplication\"\n                        handleChange={onValueChange}\n                        text=\"Open – by application\"\n                        disabled={!!characteristics[\"openWalkIns\"]}\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"hostOrg\"]}\n                        name=\"hostOrg\"\n                        handleChange={onValueChange}\n                        text=\"Host org only\"\n                        disabled={!!characteristics[\"staffOnly\"]}\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"launchEvent\"]}\n                        name=\"launchEvent\"\n                        handleChange={onValueChange}\n                        text=\"Launch event\"\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"openWalkIns\"]}\n                        name=\"openWalkIns\"\n                        handleChange={onValueChange}\n                        text=\"Open – walk-ins accepted\"\n                        disabled={!!characteristics[\"openByApplication\"]}\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"staffOnly\"]}\n                        name=\"staffOnly\"\n                        handleChange={onValueChange}\n                        text=\"Staff Only\"\n                        disabled={!!characteristics[\"hostOrg\"]}\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"survey\"]}\n                        name=\"survey\"\n                        handleChange={onValueChange}\n                        text=\"Survey\"\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"byInviteOnly\"]}\n                        name=\"byInviteOnly\"\n                        handleChange={onValueChange}\n                        text=\"By invite only\"\n                        disabled={!!characteristics[\"openByApplication\"]}\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"youthOnly\"]}\n                        name=\"youthOnly\"\n                        handleChange={onValueChange}\n                        text=\"Youth Only\"\n                        disabled={!!characteristics[\"hostOrg\"]}\n                    />\n                </div>\n\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"liveBroadcast\"]}\n                        name=\"liveBroadcast\"\n                        handleChange={onValueChange}\n                        text=\"Live broadcast\"\n                        disabled={!!characteristics[\"hostOrg\"]}\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"global\"]}\n                        name=\"global\"\n                        handleChange={onValueChange}\n                        text=\"Global\"\n                        disabled={!!characteristics[\"regional\"]}\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"registration\"]}\n                        name=\"registration\"\n                        handleChange={onValueChange}\n                        text=\"Registration\"\n                        disabled={!!characteristics[\"noRegistration\"]}\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"exhibition\"]}\n                        name=\"exhibition\"\n                        handleChange={onValueChange}\n                        text=\"Exhibition\"\n                        disabled={!!characteristics[\"noRegistration\"]}\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"regional\"]}\n                        name=\"regional\"\n                        handleChange={onValueChange}\n                        text=\"Regional\"\n                        disabled={!!characteristics[\"global\"]}\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"noRegistration\"]}\n                        name=\"noRegistration\"\n                        handleChange={onValueChange}\n                        text=\"No registration fee\"\n                        disabled={!!characteristics[\"registration\"]}\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"mediaPresence\"]}\n                        name=\"mediaPresence\"\n                        handleChange={onValueChange}\n                        text=\"W/ media presence by\n                                                    invitation\"\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"country\"]}\n                        name=\"country\"\n                        handleChange={onValueChange}\n                        text=\"Country\"\n                        disabled={!!characteristics[\"global\"]}\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"workshop\"]}\n                        name=\"workshop\"\n                        handleChange={onValueChange}\n                        text=\"Workshops\"\n                    />\n                </div>\n                <div className=\"col-12 col-sm-6 d-flex justify-content-center character__item\">\n                    <FormCheckBox\n                        checked={!!characteristics[\"opportunityForFunding\"]}\n                        name=\"opportunityForFunding\"\n                        handleChange={onValueChange}\n                        text=\"Opportunity for funding\"\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EventCharacteristics\n","import dayjs from \"dayjs\"\nimport isBetween from \"dayjs/plugin/isBetween\"\n\ndayjs.extend(isBetween)\n\nexport const isSameDay = (start: Date | string, end: Date | string) => {\n    const startDate = dayjs(start).format(\"YYYY-MM-DD\")\n    const endDate = dayjs(end).format(\"YYYY-MM-DD\")\n\n    return startDate === endDate\n}\n\nexport const isBetweenDay = (start: Date | string, end: Date | string, date: Date) => {\n    return dayjs(date).isBetween(start, end)\n}\n\nexport const isAfterDay = (start: Date | string, end: Date | string) => {\n    return dayjs(start).isAfter(end)\n}\n","import * as React from \"react\"\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\"\n\nimport DatePickerConfig from \"../Configs/DatePicker.json\"\n\nexport interface DateInputProps {\n    name: string\n    value: Date | null | undefined\n    onChange: (date: Date | null, name: string) => void\n    options?: Partial<ReactDatePickerProps>\n}\n\nconst CustomTimeInput = ({ value, onClick, onChange, ref }: any) => (\n    <div className=\"custom__time-input\">\n        <input\n            ref={ref}\n            type=\"text\"\n            className=\"form-control form-input2\"\n            onClick={onClick}\n            onChange={onChange}\n            value={value}\n        />\n        <FontAwesomeIcon className=\"icon\" icon={faChevronDown} />\n    </div>\n)\n\nconst TimeInput: React.FC<DateInputProps> = ({ name, value, onChange, options }) => {\n    return (\n        <DatePicker\n            selected={value}\n            onChange={date => onChange(date, name)}\n            showPopperArrow={true}\n            showTimeSelect\n            showTimeSelectOnly\n            timeIntervals={DatePickerConfig.timeIntervals}\n            dateFormat={DatePickerConfig.dateFormat}\n            customInput={<CustomTimeInput />}\n            timeCaption=\"Time\"\n            {...options}\n        />\n    )\n}\n\nexport default TimeInput\n","const reorder = (list: any[], startIndex: number, endIndex: number) => {\n    const [removed] = list.splice(startIndex, 1)\n    list.splice(endIndex, 0, removed)\n\n    return list\n}\n\nexport default reorder\n","import * as React from \"react\"\nimport { DragDropContext, DropResult, Droppable, Draggable } from \"react-beautiful-dnd\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\"\n\nimport FormTextArea from \"../../../../../Components/Form/FormTextArea\"\nimport TimeInput from \"../../../../../Shared/TimeInput\"\nimport DateInput from \"../../../../../Shared/DateInput\"\nimport { SubEvent } from \"../../../../../Models/User/IEvent\"\nimport FormInput from \"../../../../../Components/Form/FormInput\"\n\nexport interface SubEventsProps {\n    events: Partial<SubEvent>[]\n    onSubEventsTimeChange: (name: string, index: number, time: Date | null) => void\n    onSubEventsChange: (event: React.ChangeEvent<HTMLInputElement>, index: number) => void\n    deleteSubEvent: (index: number) => void\n    onDragEnd: (result: DropResult) => void\n}\n\nconst SubEventsList: React.FC<SubEventsProps> = ({\n    events,\n    onSubEventsTimeChange,\n    onSubEventsChange,\n    deleteSubEvent,\n    onDragEnd,\n}) => {\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n                {provided => (\n                    <div {...provided.droppableProps} ref={provided.innerRef}>\n                        {events.map((event, idx) => (\n                            <Draggable index={idx} key={event._id} draggableId={`dragdrop-${idx}`}>\n                                {provid => (\n                                    <div\n                                        ref={provid.innerRef}\n                                        key={event._id}\n                                        className=\"subevent__form-item\"\n                                        {...provid.draggableProps}\n                                        {...provid.dragHandleProps}\n                                    >\n                                        <div className=\"close__icon text-right mb-2\">\n                                            <FontAwesomeIcon\n                                                onClick={() => deleteSubEvent(idx)}\n                                                icon={faTimes}\n                                                className=\"icon\"\n                                            />\n                                        </div>\n\n                                        <div className=\"row\">\n                                            <div className=\"col-12\">\n                                                <FormInput\n                                                    name=\"title\"\n                                                    label=\"Title\"\n                                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                                                        onSubEventsChange(event, idx)\n                                                    }\n                                                    props={{\n                                                        value: event.title,\n                                                    }}\n                                                />\n                                            </div>\n                                        </div>\n\n                                        <div className=\"row\">\n                                            <div className=\"col-12\">\n                                                <div className=\"form-group\">\n                                                    <label htmlFor=\"\" className=\"form-label\">\n                                                        Start Date\n                                                    </label>\n                                                    <DateInput\n                                                        name=\"date\"\n                                                        value={event.date}\n                                                        onChange={date => onSubEventsTimeChange(\"date\", idx, date)}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                        <div className=\"row\">\n                                            <label htmlFor=\"\" className=\"col-12 form-label\">\n                                                Event Time\n                                            </label>\n\n                                            <div className=\"col-12 col-md\">\n                                                <div className=\"form-group\">\n                                                    <TimeInput\n                                                        name=\"startTime\"\n                                                        value={event.startTime}\n                                                        onChange={date => onSubEventsTimeChange(\"startTime\", idx, date)}\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div className=\"col-12 col-md\">\n                                                <div className=\"form-group\">\n                                                    <TimeInput\n                                                        name=\"endTime\"\n                                                        value={event.endTime}\n                                                        onChange={date => onSubEventsTimeChange(\"endTime\", idx, date)}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                        <FormTextArea\n                                            type=\"text\"\n                                            className={\"form-control form-input2\"}\n                                            name=\"description\"\n                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                                onSubEventsChange(e, idx)\n                                            }\n                                            inputWrapperClass={\"form-group mb-0\"}\n                                            isRequired={false}\n                                            label=\"Description\"\n                                            props={{\n                                                rows: \"3\",\n                                                placeholder: \"Description\",\n                                                value: event.description,\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Draggable>\n                        ))}\n                    </div>\n                )}\n            </Droppable>\n        </DragDropContext>\n    )\n}\n\nexport default SubEventsList\n","import * as React from \"react\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\"\nimport { DropResult } from \"react-beautiful-dnd\"\nimport reorder from \"../../../../../Helpers/Functions/reorder\"\nimport { SubEvent } from \"../../../../../Models/User/IEvent\"\n\nimport SubEventsList from \"./SubEventsList\"\n\nexport interface SubEventsProps {\n    onSubEventsChange: (subEvents: Partial<SubEvent>[]) => void\n    eventsData: Array<Record<string, any>>\n}\n\nconst SubEvents: React.FC<SubEventsProps> = ({ onSubEventsChange, eventsData = [] }) => {\n    const [subEvents, setSubEvents] = React.useState<Partial<SubEvent>[]>(eventsData)\n    const [counter, setCounter] = React.useState(0)\n\n    React.useEffect(() => {\n        onSubEventsChange(subEvents)\n        // eslint-disable-next-line\n    }, [subEvents])\n\n    React.useEffect(() => {\n        if (counter !== 2) {\n            setCounter(counter + 1)\n        }\n        // eslint-disable-next-line\n    }, [counter])\n\n    if (counter < 2) {\n        eventsData.forEach((item, idx) => {\n            if (\n                (subEvents[idx] && subEvents[idx].title !== item.title) ||\n                subEvents[idx].description !== item.description\n            ) {\n                setSubEvents(eventsData)\n            }\n        })\n    }\n\n    const onDragEnd = (result: DropResult) => {\n        if (!result.destination) return\n        const items = reorder(subEvents, result.source.index, result.destination.index)\n        onSubEventsChange(subEvents)\n        setSubEvents(items)\n    }\n\n    const onSubEventsTimeChange = (name: string, id: number, time: Date | null) => {\n        subEvents[id] = { ...subEvents[id], [name]: time }\n        onSubEventsChange(subEvents)\n\n        setSubEvents([...subEvents])\n    }\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>, id: number) => {\n        const { name, value } = e.target\n        subEvents[id] = { ...subEvents[id], [name]: value }\n        onSubEventsChange(subEvents)\n        setSubEvents([...subEvents])\n    }\n\n    const addSubEvents = () => {\n        setSubEvents(\n            subEvents.concat({\n                _id: subEvents.length.toString(),\n                date: new Date(),\n                startTime: new Date(),\n                endTime: new Date(),\n                description: \"\",\n            })\n        )\n    }\n\n    const deleteSubEvents = (idx: number) => {\n        const es = subEvents.filter((_e, index) => index !== idx)\n        setSubEvents([...es])\n    }\n\n    return (\n        <div className=\"add-sub-events mb-3 pb-1\">\n            <h6 className=\"heading-6 section__heading-custom \">\n                <span>Sub Events</span>\n                <small>For events within your larger event.</small>\n            </h6>\n            <SubEventsList\n                onDragEnd={onDragEnd}\n                deleteSubEvent={deleteSubEvents}\n                events={subEvents}\n                onSubEventsChange={onChange}\n                onSubEventsTimeChange={onSubEventsTimeChange}\n            />\n            <span className=\"d-flex event__form-footer\">\n                <span onClick={addSubEvents}>\n                    <FontAwesomeIcon icon={faPlusCircle} /> Add Sub-Event\n                </span>\n            </span>\n        </div>\n    )\n}\n\nexport default SubEvents\n","const parseCharacterics = (characteristics: string[]): { [index: string]: boolean } => {\n    const characteristicsObject: { [index: string]: boolean } = {}\n    for (let i = 0; i < characteristics.length; ++i) {\n        const replaceString = /\"/gi\n        const characteric = characteristics[i].replace(replaceString, \"\").replace(replaceString, \"\")\n        characteristicsObject[characteric] = true\n    }\n    return characteristicsObject\n}\n\nexport default parseCharacterics\n","import React, { ChangeEvent, FC, Fragment, useState, useEffect } from \"react\"\nimport { useLocation } from \"react-router-dom\"\n\nimport Form from \"../../../../Components/Form/Form\"\nimport FormInput from \"../../../../Components/Form/FormInput\"\nimport FormTextArea from \"../../../../Components/Form/FormTextArea\"\nimport FormHeader from \"../../../../Container/Top/FormHeader\"\nimport TimeInput from \"../../../../Shared/TimeInput\"\nimport DateInput from \"../../../../Shared/DateInput\"\nimport FormSelect from \"../../../../Components/Form/FormSelect\"\nimport { PictureIcon } from \"../../../../Shared/Icons\"\nimport EventCharacteristics from \"./EventCharacter\"\nimport SubEvents from \"./SubEvents/index\"\n\nimport IEvent, { SubEvent } from \"../../../../Models/User/IEvent\"\nimport parseCharacterics from \"../../../../Helpers/Functions/parseCharacter\"\nimport assetUrl from \"../../../../Helpers/Functions/assetUrl\"\nimport TimeZones from \"./../../../../Configs/timezone.json\"\nimport Notification from \"../../../../Shared/Notification/Notification\"\nimport { isAfterDay } from \"../../../../Helpers/Functions/isSameDay\"\nimport { getHours, setHours } from \"../../../../Helpers/Date/time\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\"\nimport mediaUploader from \"../../../../Helpers/Request/Services/uploadFile/FileUpload\"\n\nlet start = new Date()\nstart.setHours(9, 0)\n\nlet notificationBefore = [\n    { title: \"15 minutes before the event\", value: 15 },\n    { title: \"30 minutes before the event\", value: 30 },\n    { title: \"1 hour before the event\", value: 60 },\n    { title: \"1 day before the event\", value: 1440 },\n]\n\nconst CreateEventForm: FC = () => {\n    const { state } = useLocation<IEvent>()\n\n    const [relatedLinks, setRelatedLinks] = useState([\n        {\n            title: \"\",\n            url: \"\",\n        },\n    ])\n    const [imagePreview, setImagePreview] = useState<string | undefined>(undefined)\n\n    const [values, setValues] = useState<any>({\n        link: relatedLinks,\n        contactRsvp: \"\",\n        date: {\n            startDate: new Date(),\n            endDate: new Date(),\n        },\n        address: \"\",\n        time: {\n            startTime: start,\n            endTime: start,\n        },\n        characteristics: {},\n        subEvent: [\n            {\n                _id: \"0\",\n                title: \"\",\n                date: new Date(),\n                startTime: new Date().setHours(9, 0),\n                endTime: new Date().setHours(9, 0),\n                description: \"\",\n            },\n        ],\n        isPublished: true,\n        notifyUser: 30,\n        images: [],\n    })\n    const [dateInput, setDateInput] = useState({\n        minTimeAllowed: values.date.startDate,\n        maxTimeAllowed: values.date.startDate,\n    })\n\n    const onSubEventsChange = (subEvents: Partial<SubEvent>[]) => {\n        setValues({\n            ...values,\n            subEvent: subEvents.map(subEvent => ({\n                title: subEvent.title,\n                date: subEvent.date,\n                description: subEvent.description,\n                endTime: subEvent.endTime,\n                startTime: subEvent.startTime,\n            })),\n        })\n    }\n\n    const onValueChange = (e: ChangeEvent<HTMLInputElement>) => {\n        let { type, name, value, checked } = e.target\n\n        if (type === \"checkbox\") {\n            setValues({\n                ...values,\n                characteristics: {\n                    ...values.characteristics,\n                    [e.target.name]: checked,\n                },\n            })\n            return\n        }\n\n        setValues({ ...values, [name]: value })\n    }\n\n    const onDateChange = (date: Date | null, name: string) => {\n        if (name === \"startDate\" && date && isAfterDay(date, values.date.endDate)) {\n            setValues({\n                ...values,\n                date: {\n                    ...values.date,\n                    [name]: date,\n                    endDate: date,\n                },\n            })\n        } else {\n            setValues({\n                ...values,\n                date: {\n                    ...values.date,\n                    [name]: date,\n                },\n            })\n        }\n    }\n\n    const onTimeChange = (time: Date | null | undefined, name: string) => {\n        if (name === \"startTime\" && time && isAfterDay(time, values.date.endTime)) {\n            setValues({\n                ...values,\n                time: {\n                    // ...values.date,\n                    [name]: time,\n                    endTime: time,\n                },\n            })\n        } else {\n            setValues({\n                ...values,\n                time: {\n                    ...values.time,\n                    [name]: time,\n                },\n            })\n        }\n    }\n\n    const onLinksChange = (e: ChangeEvent<HTMLInputElement>, id: number) => {\n        const { name, value } = e.target\n\n        let relatedClone = relatedLinks\n        relatedClone[id] = { ...relatedClone[id], [name]: value }\n        setRelatedLinks(relatedClone)\n    }\n\n    const onImageChange = (event: ChangeEvent<HTMLInputElement>) => {\n        if (event.target.files && event.target.files.length > 0) {\n            const file = event.target.files[0]\n            console.log(\"file being upload\", file)\n            const formData = new FormData()\n            formData.append(\"images\", file)\n            mediaUploader.uploadFile(formData).then(res => {\n                console.log(res)\n                setValues({ ...values, images: [res.data.data] })\n            })\n\n            // setValues({ ...values, images: event.target.files[0] })\n\n            const reader = new FileReader()\n            reader.onload = e => {\n                setImagePreview(e.target?.result?.toString())\n            }\n\n            reader.readAsDataURL(event.target.files[0])\n        }\n    }\n\n    const removeImage = (event: React.MouseEvent<HTMLDivElement>) => {\n        event.preventDefault()\n        // setValues({ ...values, images: null })\n        setValues({ ...values, images: [] })\n        setImagePreview(undefined)\n    }\n\n    const getFormData = () => {\n        const chars: string[] = []\n\n        Object.keys(values.characteristics).forEach(char => {\n            if (values.characteristics[char]) {\n                chars.push(char)\n            }\n        })\n\n        return {\n            ...values,\n            // subEvent: JSON.stringify(values.subEvent), older version (for formData)\n            subEvent: processSubEvents(values.subEvent),\n            characteristics: chars,\n            link: [...relatedLinks],\n        }\n    }\n\n    useEffect(() => {\n        if (state) {\n            const data = {\n                _id: state._id,\n                time: {\n                    startTime: state.time?.startTime ? new Date(state.time.startTime) : new Date(),\n                    endTime: state.time?.endTime ? new Date(state.time.endTime) : new Date(),\n                },\n                date: {\n                    startDate: new Date(state.date?.startDate || \"\"),\n                    endDate: new Date(state.date?.endDate || \"\"),\n                },\n                city: state.city || \"\",\n                country: state.country || \"\",\n                description: state.description || \"\",\n                address: state.address || \"\",\n                coHostedBy: state.coHostedBy || \"\",\n                hostedBy: state.hostedBy || \"\",\n                contactRsvp: state.contactRsvp || \"\",\n                eventName: state.eventName || \"\",\n                link: state.link || \"\",\n                images: state.images || [],\n                notifyUser: state.notifyUser || 30,\n                characteristics: parseCharacterics(state.characteristics || []),\n                subEvent: [\n                    ...state.subEvent.map((item: any) => {\n                        item.date = new Date(item?.date || \"\")\n                        item.startTime = new Date(item.startTime || \"\")\n                        item.endTime = new Date(item.endTime || \"\")\n                        return item\n                    }),\n                ],\n            }\n\n            console.log(\"Data\", data)\n\n            setValues(data)\n            setRelatedLinks([...(state.link || [])])\n            setImagePreview(assetUrl(state.images[0]))\n        }\n    }, [state])\n\n    useEffect(() => {\n        console.log(\"event testing\", values)\n        if (values.date.startDate) {\n            const hour = getHours(values.time.startTime)\n\n            setDateInput({\n                minTimeAllowed: setHours(values.date.startDate, hour).toDate(),\n                maxTimeAllowed: setHours(values.date.endDate, 23).toDate(),\n            })\n        }\n    }, [values.date.startDate, values.time.startTime, values.date.endDate])\n\n    return (\n        <div className=\"cp-wrap\">\n            <FormHeader title=\"Create Event\" showDrafts={false} />\n            <div className=\"cp-form\">\n                <Form\n                    data={getFormData()}\n                    isFormData={false}\n                    method={state && state.isPublished ? \"PUT\" : \"POST\"}\n                    submitUrl={state && state.isPublished ? \"event/update\" : \"general/event\"}\n                    saveAsDraftUrl={\"draft/event\"}\n                    afterSubmit={() => {\n                        Notification(\n                            \"You have successfully created an event! The admins will now review your submission before it is displayed on the Calendar.\",\n                            \"success\"\n                        )\n                    }}\n                    props={{\n                        saveAsDraft: !state,\n                        draftURL: \"draft/event\",\n                    }}\n                    redirectUrl=\"/profile/events\"\n                    buttonText={state && state.isPublished ? \"UPDATE\" : \"POST\"}\n                >\n                    <div className=\"form-group\">\n                        <label htmlFor=\"eventImage\" className=\"d-block w-100\">\n                            <div id=\"drop-region\">\n                                {imagePreview ? (\n                                    <div id=\"image-preview\" className=\"pointer-events-none\">\n                                        <div className=\"close__icon pointer-events-all\" onClick={removeImage}>\n                                            <FontAwesomeIcon icon={faTimesCircle} />\n                                        </div>\n                                        <img className=\"pointer-events-all\" src={imagePreview} alt=\"\" />\n                                    </div>\n                                ) : (\n                                    <React.Fragment>\n                                        <div className=\"drop-image\">\n                                            <div className=\"feature_link\">{PictureIcon}</div>\n                                        </div>\n                                        <div className=\"drop-message\">Click to upload</div>\n                                    </React.Fragment>\n                                )}\n\n                                <input\n                                    className=\"file__input\"\n                                    type=\"file\"\n                                    name=\"image\"\n                                    id=\"eventImage\"\n                                    onChange={onImageChange}\n                                />\n                            </div>\n                        </label>\n                    </div>\n                    <FormInput\n                        type=\"text\"\n                        className={\"form-control form-input2\"}\n                        name=\"eventName\"\n                        onChange={onValueChange}\n                        isRequired={true}\n                        label=\"Event Title\"\n                        props={{\n                            value: values.eventName,\n                        }}\n                    />\n                    <div className=\"row\">\n                        <label htmlFor=\"startDate\" className=\"col-12 form-label\">\n                            Event Date\n                        </label>\n\n                        <div className=\"col-12 col-md\">\n                            <div className=\"row\">\n                                <div className=\"col-12 col-md-6\">\n                                    <DateInput\n                                        name=\"startDate\"\n                                        value={values.date.startDate}\n                                        options={{\n                                            onChange: date => onDateChange(date, \"startDate\"),\n                                            wrapperClassName: \"form-group\",\n                                            placeholderText: \"Start Date\",\n                                        }}\n                                    />\n                                </div>\n                                <div className=\"col-12 col-md-6\">\n                                    <DateInput\n                                        name=\"endDate\"\n                                        value={values.date.endDate}\n                                        options={{\n                                            onChange: date => onDateChange(date, \"endDate\"),\n                                            wrapperClassName: \"form-group\",\n                                            placeholderText: \"End Date\",\n                                            minDate: values.date.startDate,\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"row\">\n                        <label htmlFor=\"\" className=\"col-12 form-label\">\n                            Event Time\n                        </label>\n\n                        <div className=\"col-12 col-md\">\n                            <div className=\"form-group\">\n                                <TimeInput\n                                    name=\"startTime\"\n                                    value={values.time.startTime}\n                                    onChange={onTimeChange}\n                                    options={{\n                                        placeholderText: \"Start Time\",\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"col-12 col-md\">\n                            <div className=\"form-group\">\n                                <TimeInput\n                                    name=\"endTime\"\n                                    value={values.time.endTime}\n                                    onChange={onTimeChange}\n                                    options={{\n                                        placeholderText: \"End Time\",\n                                        minTime: dateInput.minTimeAllowed,\n                                        maxTime: dateInput.maxTimeAllowed,\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                    <FormSelect onChange={onValueChange} isRequired={false} name=\"timezone\" label=\"TimeZone\">\n                        {TimeZones.map(timezone => (\n                            <option value={timezone} key={timezone}>\n                                {timezone}\n                            </option>\n                        ))}\n                    </FormSelect>\n\n                    <FormInput\n                        type=\"address\"\n                        className={\"form-control form-input2\"}\n                        name=\"address\"\n                        onChange={onValueChange}\n                        isRequired={true}\n                        label=\"Address\"\n                        props={{\n                            placeholder: \"Building number, building name, street address\",\n                            value: values.address,\n                        }}\n                    />\n\n                    <FormInput\n                        type=\"text\"\n                        className={\"form-control form-input2\"}\n                        name=\"hostedBy\"\n                        onChange={onValueChange}\n                        isRequired={false}\n                        label=\"Host\"\n                        props={{\n                            placeholder: \"Organization. Do not abbreviate.\",\n                            value: values.hostedBy,\n                        }}\n                    />\n                    <FormInput\n                        type=\"text\"\n                        className={\"form-control form-input2\"}\n                        name=\"coHostedBy\"\n                        onChange={onValueChange}\n                        isRequired={false}\n                        label=\"Co-Host/s\"\n                        props={{\n                            placeholder: \"Separate different organizations with a comma\",\n                            value: values.coHostedBy,\n                        }}\n                    />\n                    <div className=\"row\">\n                        <label htmlFor=\"startDate\" className=\"col-12 form-label\">\n                            Venue\n                        </label>\n\n                        <div className=\"col-12 col-md\">\n                            <div className=\"row\">\n                                <div className=\"col-12 col-md-6\">\n                                    <FormInput\n                                        type=\"text\"\n                                        className={\"form-control form-input2\"}\n                                        name=\"country\"\n                                        onChange={onValueChange}\n                                        isRequired={false}\n                                        props={{\n                                            placeholder: \"Country\",\n                                            value: values.country,\n                                        }}\n                                    />\n                                </div>\n                                <div className=\"col-12 col-md-6\">\n                                    <FormInput\n                                        type=\"text\"\n                                        className={\"form-control form-input2\"}\n                                        name=\"city\"\n                                        onChange={onValueChange}\n                                        isRequired={false}\n                                        props={{\n                                            placeholder: \"City\",\n                                            value: values.city,\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <FormTextArea\n                        type=\"text\"\n                        className={\"form-control form-input2\"}\n                        name=\"description\"\n                        onChange={onValueChange}\n                        inputWrapperClass={\"form-group\"}\n                        isRequired={false}\n                        label=\"Description\"\n                        props={{\n                            rows: \"3\",\n                            value: values.description,\n                        }}\n                    />\n\n                    <FormSelect\n                        onChange={onValueChange}\n                        isRequired={false}\n                        name=\"notifyUser\"\n                        label=\"Notification options\"\n                        defaultValue={values.notifyUser}\n                    >\n                        {notificationBefore.map(notif => (\n                            <option value={notif.value} key={notif.value}>\n                                {notif.title}\n                            </option>\n                        ))}\n                    </FormSelect>\n\n                    {/* ################################ */}\n                    <div className=\"event-chractersctics mb-2\">\n                        <div className=\"event-chractersctics-wrap\">\n                            <div className=\"event-chractersctics-wrap\">\n                                <div className=\"event-chr-head\">\n                                    <div className=\"row\">\n                                        <div className=\"col-md-12 pr-md-0\">\n                                            <h6 className=\"heading-6 section__heading-custom  d-flex\">\n                                                <span>Event Characteristics</span>\n                                                <small>Select all that apply.</small>\n                                            </h6>\n                                        </div>\n                                    </div>\n\n                                    <EventCharacteristics\n                                        onValueChange={onValueChange}\n                                        characteristics={values.characteristics}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <FormTextArea\n                        label={\"RSVP\"}\n                        inputWrapperClass=\"form-group pb-4\"\n                        name={\"contactRsvp\"}\n                        isRequired={false}\n                        onChange={onValueChange}\n                        className=\"form-control form-input2\"\n                        type={\"text\"}\n                        props={{\n                            row: 3,\n                            placeholder: \"Write details on how to pose inquiries and confirm attendance\",\n                            value: values.contactRsvp,\n                        }}\n                    />\n                    <div className=\"row align-items-md-center\">\n                        <label className=\"form-label col-12\">Related Link</label>\n\n                        <div className=\"col-12 col-md\">\n                            <div className=\"row\">\n                                {relatedLinks.map((item, idx) => (\n                                    <Fragment key={idx}>\n                                        <div className=\"col-md-6\">\n                                            <FormInput\n                                                defaultValue={item.title}\n                                                type={\"text\"}\n                                                className={\"form-control form-input2\"}\n                                                name={\"title\"}\n                                                onChange={(e: ChangeEvent<HTMLInputElement>) => onLinksChange(e, idx)}\n                                                props={{\n                                                    placeholder: \"Title\",\n                                                }}\n                                            />\n                                        </div>\n                                        <div className=\"col-md-6\">\n                                            <FormInput\n                                                defaultValue={item.url}\n                                                type=\"url\"\n                                                className={\"form-control form-input2\"}\n                                                name=\"url\"\n                                                onChange={(e: ChangeEvent<HTMLInputElement>) => onLinksChange(e, idx)}\n                                                props={{\n                                                    placeholder: \"Url\",\n                                                }}\n                                            />\n                                        </div>\n                                    </Fragment>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                    <SubEvents onSubEventsChange={onSubEventsChange} eventsData={values.subEvent} />\n\n                    {/* <EventFormModerator /> */}\n                </Form>\n            </div>\n        </div>\n    )\n}\n\nexport default CreateEventForm\n\nexport const processSubEvents = (subEvents: any[]) => {\n    let se = []\n    for (let i = 0; i < subEvents.length; i++) {\n        if (subEvents[i]?.title?.trim()?.length > 0 || subEvents[i]?.description?.trim()?.length > 0) {\n            se.push(subEvents[i])\n        }\n    }\n    return se\n}\n","import * as React from \"react\"\n\nexport interface EventRulesProps {}\n\nconst EventRules: React.FC<EventRulesProps> = () => {\n    return (\n        <div className=\"event__info\">\n            {/* <h3 className=\"title\">Event Creation Reminders</h3> */}\n            <h6 className=\"heading-6 ad__title\">Event Creation Reminders</h6>\n\n            <ul className=\"rules__list\">\n                <li>\n                    Make sure to{\" \"}\n                    <span className=\"font-weight-bold\">check first</span> if\n                    this event already exists.\n                </li>\n                <li>\n                    You can invite other users to{\" \"}\n                    <span className=\"font-weight-bold\">moderate</span> this\n                    event.\n                </li>\n                <li>\n                    Moderators can{\" \"}\n                    <span className=\"font-weight-bold\">make edits</span> to\n                    event details and help manage the{\" \"}\n                    <span className=\"font-weight-bold\">comments section</span>\n                    of the event page.\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default EventRules\n","import React, { FC } from \"react\"\n\nimport CalenderComponent from \"../../Calender/Components/GridView/CalenderComponent\"\nimport CreateEventForm from \"./Component/CreateEventForm\"\nimport EventRules from \"./Component/EventRules\"\nimport MainContent from \"../../../Controller/Main/Content\"\n\nconst CreateEvent: FC = () => {\n    return (\n        <MainContent\n            asideRightContent={\n                <>\n                    {/* <div className=\"sidebar-calender-component\">\n                        <CalenderComponent events={[]} />\n                    </div> */}\n                    <div className=\"sidebar-calender-component\">\n                        <EventRules />\n                    </div>\n                </>\n            }\n        >\n            <CreateEventForm />\n        </MainContent>\n    )\n}\n\nexport default CreateEvent\n"],"sourceRoot":""}